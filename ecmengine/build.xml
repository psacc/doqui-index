<?xml version="1.0"?>

<project name="ecmengine" default="default" basedir=".">

	<loadproperties srcfile="buildfiles/build.properties" />

	<property name="project" value="ecmengine"/>
	<property name="product.dir" value="doqui/index" />

	<property name="nodeservice.splitting.bean" value="splittingDbNodeService" />

	<!-- taskdef for external task -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!-- INIT TARGET -->
	<target name="init" description="Inizializza lo script Ant">

		<property environment="env"/>

		<echo message="${env.JAVA_HOME_SERVER}" />

		<tstamp>
			<format property="current_time" pattern="dd/MM/yyyy HH.mm.ss SSS" />
		</tstamp>

		<echo message="project.name: ${project.name}"/>
		<echo message="ant.project.name: ${ant.project.name}"/>
		<echo message="ant.file: ${ant.file}"/>
		<echo message="basedir: ${basedir}"/>
		<echo message="ant.java.version: ${ant.java.version}"/>
		<echo message="os.arch: ${os.arch}"/>
		<echo message="os.version: ${os.version}"/>
		<echo message="java.vm.version: ${java.vm.version}"/>
		<echo message="java.vm.vendor: ${java.vm.vendor}"/>
		<echo message="user.home: ${user.home}"/>
		<echo message="current time: ${current_time}"/>
		<echo message="" />

		<condition property="jboss.version" value="4.0.5" else="${jboss.version}">
			<equals arg1="${jboss.version}" arg2="$${jboss.version}" />
		</condition>

		<condition property="target.enable.cooptrace" value="true" else="false">
			<equals arg1="${target.enable.cooptrace}" arg2="true" />
		</condition>
		<condition property="batch.target.enable.cooptrace" value="true" else="false">
			<equals arg1="${batch.target.enable.cooptrace}" arg2="true" />
		</condition>

		<condition property="target.enable.audit" value="true" else="false">
			<equals arg1="${target.enable.audit}" arg2="true" />
		</condition>
		<condition property="batch.target.enable.audit" value="true" else="false">
			<equals arg1="${batch.target.enable.audit}" arg2="true" />
		</condition>

		<condition property="target.enable.security" value="true" else="${target.enable.security}">
			<equals arg1="${target.enable.security}" arg2="$${target.enable.security}" />
		</condition>

        <!--
		<condition property="exclude_security" value="it/${product.dir}/${project}/business/publishing/security/** it/${product.dir}/${project}/integration/security/** it/${product.dir}/${project}/exception/security/** it/${product.dir}/${project}/interfacecsi/security/** it/${product.dir}/${project}/dto/engine/security/** it/${product.dir}/${project}/client/webservices/dto/engine/security/**" else="">
			<equals arg1="${target.enable.security}" arg2="false" />
		</condition>
		<property name="exclude_security" value="it/${product.dir}/${project}/business/publishing/security/** it/${product.dir}/${project}/interfacecsi/security/**"/>
        -->

		<property name="exclude_security" value=""/>

		<condition property="target.db.pool.initial" value="20" else="${target.db.pool.initial}">
			<equals arg1="${target.db.pool.initial}" arg2="$${target.db.pool.initial}" />
		</condition>
		<condition property="target.db.pool.max" value="40" else="${target.db.pool.max}">
			<equals arg1="${target.db.pool.max}" arg2="$${target.db.pool.max}" />
		</condition>
		<condition property="target.db.pool.timeout" value="120" else="${target.db.pool.timeout}">
			<equals arg1="${target.db.pool.timeout}" arg2="$${target.db.pool.timeout}" />
		</condition>

		<echo message="Escludo: ${exclude_security}" />
		<echo message="Audit  : ${target.enable.audit}" />

		<property name="classpath"
			value="lib/commons-codec-1.3.jar;lib/saxpath-1.0.jar;lib/lucene-core-2.1.0.jar;lib/csi-core-1.4.5.jar;lib/csi-ejb-1.4.5.jar;lib/csi-rmi-1.4.5.jar;lib/csi-stadapter-1.4.5.jar;lib/csi-tools-1.4.5.jar;lib/jboss-j2ee-${jboss.version}.jar;lib/jboss-servlet-api-${jboss.version}.jar;lib/firma-digitale-1.1.2.jar;lib/alfresco-repository-484-2.9.3B.jar;lib/alfresco-core-484-2.9.3B.jar;lib/spring-2.0.2.jar;lib/log4j-1.2.8.jar;lib/commons-logging-1.0.4.jar;lib/hibernate-3.2.1.jar;lib/util-perf-1.0.1.jar;${project.dir.build}/classes;lib/junit-3.8.1.jar;lib/lucene-core-2.1.0.jar;lib/ehcache-1.3.0-patched.jar;lib/quartz-1.6.0.jar;lib/commons-io-1.1.jar;lib/dom4j-1.6.1.jar;lib/acegi-security-0.8.2_patched.jar;lib/jibx-run-2.1.jar;lib/axis-1.4.jar;lib/axis-ant-1.4.jar;lib/activation-1.0.2.jar;lib/jug-1.1.2.jar;lib/fileformat-1.0.0.jar;lib/servlet-2.4.jar;lib/dosign-common-1.0.0.jar;lib/dosign-client-1.0.0.jar;lib/bcmail-jdk15-137.jar;lib/bcprov-jdk15-137.jar"/>
		<property name="classpath_test"
			value="${classpath};${project.dir.build.archives}/ecmengine-backoffice-client-${client.version}.jar;${project.dir.build.archives}/ecmengine-engine-client-${client.version}.jar;${project.dir.build.archives}/ecmengine-common-${client.version}.jar;lib/junit-3.8.1.jar"/>

		<property name="lib_mtom"			    value="FastInfoset-1.2.7.jar,XmlSchema-1.4.5.jar,aopalliance-1.0.jar,asm-2.2.3.jar,commons-logging-1.1.1.jar,cxf-2.2.3.jar,cxf-manifest.jar,geronimo-activation_1.1_spec-1.0.2.jar,geronimo-annotation_1.0_spec-1.1.1.jar,geronimo-javamail_1.4_spec-1.6.jar,geronimo-jaxws_2.1_spec-1.0.jar,geronimo-stax-api_1.0_spec-1.0.1.jar,geronimo-ws-metadata_2.0_spec-1.1.2.jar,jaxb-api-2.1.jar,jaxb-impl-2.1.9.jar,neethi-2.0.4.jar,saaj-api-1.3.jar,saaj-impl-1.3.2.jar,spring-beans-2.5.5.jar,spring-context-2.5.5.jar,spring-context-support-2.5.5.jar,spring-core-2.5.5.jar,spring-web-2.5.5.jar,wsdl4j-1.6.2.jar,wstx-asl-3.2.8.jar,"/>
        <property name="lib_mtom_dependences"   value="abdera-core-0.4.0-incubating.jar,abdera-extensions-json-0.4.0-incubating.jar,abdera-extensions-main-0.4.0-incubating.jar,abdera-i18n-0.4.0-incubating.jar,abdera-parser-0.4.0-incubating.jar,antlr-2.7.7.jar,axiom-api-1.2.7.jar,axiom-impl-1.2.7.jar,bcprov-jdk15-140.jar,commons-httpclient-3.1.jar,commons-lang-2.4.jar,cxf-xjc-bug671-2.2.3.jar,FastInfoset-1.2.3.jar,geronimo-jms_1.1_spec-1.1.1.jar,geronimo-servlet_2.5_spec-1.2.jar,jaxb-impl-2.1.9.jar,jaxb-xjc-2.1.9.jar,jettison-1.1.jar,jetty-6.1.18.jar,jetty-util-6.1.18.jar,jra-1.0-alpha-4.jar,js-1.7R1.jar,jsr311-api-1.0.jar,serializer-2.7.1.jar,slf4j-api-1.5.6.jar,slf4j-jdk14-1.5.6.jar,spring-jms-2.5.5.jar,spring-tx-2.5.5.jar,velocity-1.5.jar,wss4j-1.5.7.jar,xalan-2.7.1.jar,xml-resolver-1.2.jar,xmlbeans-2.4.0.jar,xmlsec-1.4.2.jar"/>
		<property name="classpath_o_mtom"	    value="lib/FastInfoset-1.2.7.jar;lib/XmlSchema-1.4.5.jar;lib/aopalliance-1.0.jar;lib/asm-2.2.3.jar;lib/commons-logging-1.1.1.jar;lib/cxf-2.2.3.jar;lib/cxf-manifest.jar;lib/geronimo-activation_1.1_spec-1.0.2.jar;lib/geronimo-annotation_1.0_spec-1.1.1.jar;lib/geronimo-javamail_1.4_spec-1.6.jar;lib/geronimo-jaxws_2.1_spec-1.0.jar;lib/geronimo-stax-api_1.0_spec-1.0.1.jar;lib/geronimo-ws-metadata_2.0_spec-1.1.2.jar;lib/jaxb-api-2.1.jar;lib/jaxb-impl-2.1.9.jar;lib/neethi-2.0.4.jar;lib/saaj-api-1.3.jar;lib/saaj-impl-1.3.2.jar;lib/spring-beans-2.5.5.jar;lib/spring-context-2.5.5.jar;lib/spring-context-support-2.5.5.jar;lib/spring-core-2.5.5.jar;lib/spring-web-2.5.5.jar;lib/wsdl4j-1.6.2.jar;lib/wstx-asl-3.2.8.jar"/>

		<property name="classpath_mtom"
			value="${classpath};${classpath_o_mtom};lib/util-perf-1.0.1.jar"/>
		<mkdir dir="${project.dir.build}"/>
		<mkdir dir="${project.dir.build.registry}"/>
		<mkdir dir="${project.dir.build.classes}"/>
		<mkdir dir="${project.dir.dist}" />
	</target>

	<target name="init-target" description="Inizializza lo script con i parametri specifici per server">

		<fail unless="target" message="Missing target!"/>
		<loadproperties srcFile="buildfiles/${target}.properties" />

		<condition property="target.enable.cooptrace" value="true" else="false">
			<equals arg1="${target.enable.cooptrace}" arg2="true" />
		</condition>
		<condition property="target.enable.cooptrace" value="true" else="false">
			<equals arg1="${batch.target.enable.cooptrace}" arg2="true" />
		</condition>

		<condition property="jboss.version" value="4.0.5" else="${target.jboss.version}">
			<equals arg1="${target.jboss.version}" arg2="$${target.jboss.version}" />
		</condition>

		<condition property="target.ejb.extension" value="${target.ejb.extension}" else="">
			<isset property="target.ejb.extension" />
		</condition>
		<condition property="batch.target.ejb.extension" value="${batch.target.ejb.extension}" else="">
			<isset property="batch.target.ejb.extension" />
		</condition>
		<condition property="target.root.log.category" value="${target.root.log.category}" else="index.ecmengine${target.ejb.extension}">
			<isset property="target.root.log.category" />
		</condition>
		<condition property="batch.target.root.log.category" value="${batch.target.root.log.category}" else="index.ecmengine${batch.target.ejb.extension}">
			<isset property="batch.target.root.log.category" />
		</condition>
		<condition property="target.build.ear" value="${target.build.ear}" else="single-instance">
			<isset property="target.build.ear" />
		</condition>



		<echo message="Target: ${target}" />
		<echo message="Use : ${target.use_csi}" />
		<echo message="Use Splitting: ${target.use_splitting} [Mode: ${target.splitting.mode}]" />
		<echo message="Use Multirepository: ${target.use_multirepository}" />
		<echo message="Application server: ${target.application.server}" />
		<echo message="JBoss version: ${jboss.version}" />
		<echo message="EJB Extension: ${target.ejb.extension}" />
		<echo message="" />
		<echo message="Include PA SOAP Bridge: ${target.include_pabr}" />
		<echo message="" />

		<mkdir dir="${project.dir.build.archives}"/>
		<mkdir dir="${project.dir.build.archives.included}"/>
		<mkdir dir="${project.dir.dist.target}" />
	</target>

	<target name="init-ivy">
		<taskdef name="ivy-configure" classname="fr.jayasoft.ivy.ant.IvyConfigure"/>
		<taskdef name="ivy-resolve" classname="fr.jayasoft.ivy.ant.IvyResolve"/>
		<taskdef name="ivy-retrieve" classname="fr.jayasoft.ivy.ant.IvyRetrieve"/>
	</target>

	<target name="resolve-dependencies" depends="init-ivy" description="carica le librerie dal repository remoto">
		<ivy-configure file="buildfiles/ivyconf.xml" />
		<ivy-resolve   file="buildfiles/ivy.xml" />
	</target>

	<target name="load-dependencies" depends="resolve-dependencies">
		<ivy-retrieve pattern="lib/${artifact}.${type}" />
	</target>

	<target name="load-ivy">
		<condition property="target.ivy.task"
		           value="skip-dependencies"
		           else="load-dependencies">
			<equals arg1="${target.disable.ivy}" arg2="true"/>
		</condition>
		<echo message="target.disable.ivy: ${target.disable.ivy}"/>
		<antcall target="${target.ivy.task}" />
	</target>

	<target name="skip-dependencies">
		<echo message="skipping ivy dependency resolution..."/>
	</target>

	<!-- Test per i content model -->
	<target name="init-testModel">
		<property name="modelToTestSys" value="ecmengineSystemModel.xml"/>
		<property name="modelToTest" value="sideAggregationModel.xml"/>
		<property name="modelToTest2" value="sideDossierModel.xml"/>
		<property name="modelToTestDoc" value="sideDocumentModel.xml"/>
		<property name="modelToTestCedolini" value="cedosrvCedoliniModel.xml"/>
	</target>

	<target name="test-model" depends="init-testModel,load-ivy">
		<java classname="org.alfresco.repo.dictionary.TestModel" failonerror="true">
			<arg value="${modelToTestSys}"/>
			<arg value="${modelToTestDoc}"/>
			<arg value="${modelToTest}"/>
			<arg value="${modelToTest2}"/>
			<arg value="${modelToTestCedolini}"/>
			<classpath>
				<pathelement location="./conf/alfresco/ecmengine/model"/>
				<pathelement location="./conf/alfresco/internal"/>
				<pathelement location="./build/classes"/>
				<fileset dir="./lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>


	<!-- Controllo per CSI BEGIN -->
	<target name="include-conditional-csi" depends="csi-beans-jar"
	        description="Include le porte applicative CSI">
		<echo message="csi-beans.jar: incluso." />

		<mkdir dir="${project.dir.build.archives.included}/lib" />
		<copy todir="${project.dir.build.archives.included}/lib">
			<fileset dir="${project.dir.lib}" includes="csi-*-1.4.5.jar" excludes="csi-stadapter-1.4.5.jar"/>
		</copy>
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@csi_module@@"
		         value="&lt;module&gt;&lt;ejb&gt;csi-beans.jar&lt;/ejb&gt;&lt;/module&gt;" />

	</target>

	<target name="exclude-conditional-csi"
	        description="Esclude le porte applicative CSI">
		<echo message="csi-beans.jar: escluso." />
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@csi_module@@" value="" />
	</target>
	<!-- Controllo per CSI END -->

	<target name="internal-configuration-alfresco"
	        description="Crea un jar per le configurazioni di alfresco interne al pacchetto deployato">

		<jar destfile="${project.dir.build.tmp}/alfresco-internal.jar"
			 update="true"
			 basedir="${project.dir.conf}/alfresco/internal"
			 excludes="//*.exe">

			<!-- Custom content model -->
			<zipfileset file="${project.dir.conf}/alfresco/ecmengine/ecmengine-model-context.xml" prefix="${project.ear.ecmengine.conf.alfresco-extension}"/>
			<zipfileset file="${project.dir.conf}/alfresco/ecmengine/model/*.xml" prefix="${project.ear.ecmengine.conf.alfresco-extension}/model"/>
			<zipfileset file="${project.dir.conf}/alfresco/ecmengine/core-services-context.xml" prefix="${project.ear.ecmengine.conf.alfresco}"/>
			<zipfileset file="${project.dir.conf}/alfresco/ecmengine/hibernate.properties" prefix=""/>
		</jar>
	</target>

	<target name="package-ear" description="Crea il file EAR per il deployment"
	        depends="publishing-beans-jar,
				audit-jar,
				audit-trail-jar,
				extension-external,
				multirepository-jar,
		        move-aggregation-job-jar,
				personalization-security-jar,
				personalization-encryption-jar,
				personalization-hibernate-jar,
				personalization-splitting-jar,
				personalization-workflow-jar,
				personalization-importer-jar,
				job-manager-jar,
				mimetype-manager-jar,
				integrity-manager-jar,
 				metadati-backup-job-jar">



		<!-- Definizione di property per il doppio deploy su Bea e JBoss -->

		<condition property="ear.lib"
			   value="APP-INF/lib"
	           else="lib">
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="ear.classes.alfresco"
					   value="APP-INF/classes/alfresco"
			           else="classes/alfresco">
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="ear.classes"
					   value="APP-INF/classes"
			           else="classes">
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="appserv.is.weblogic" >
					<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<!-- Definizione di property per includere le librerie csi nel caso di utilizzo di PA/PD -->
		<condition property="use.csi" value="true" else="false" >
					<equals arg1="${target.use_csi}" arg2="true" />
		</condition>

        <!-- Helper per commentare parti di file di configurazione -->
		<condition property="exclude_pa_on" value="&lt;!--" else="" >
 			<equals arg1="${use.csi}" arg2="false" />
		</condition>
		<condition property="exclude_pa_off" value="--&gt;" else="" >
 			<equals arg1="${use.csi}" arg2="false" />
		</condition>

		<condition property="lib.csi"
				value="${project.dir.build.archives}/included/lib"
			    else="${project.dir.build.archives}/included" >
 			<equals arg1="${target.use_csi}" arg2="true" />
		</condition>

		<condition property="lib.cooptrace"
				value="${project.dir.build.archives}/included/lib"
			    else="${project.dir.build.archives}/included" >
 			<equals arg1="${target.use.cooptrace}" arg2="true" />
		</condition>

		<condition property="use.security"
				value="${target.enable.security}" else="true">
 			<equals arg1="${target.enable.security}" arg2="false" />
		</condition>

		<copy file="${project.dir.conf}/application/META-INF/application.xml"
		      tofile="${project.dir.build.tmp}/ear/application.xml"/>

		<condition property="target.csi.include"
		           value="include-conditional-csi"
		           else="exclude-conditional-csi">
			<equals arg1="${target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione archivio EAR..."/>
		<echo message="Configurazione moduli inclusi..."/>
		<antcall target="${target.csi.include}" />

		<!-- Include pa bridged web service -->
		<condition property="target.pabr"
		           value="package-pabr"
		           else="no-pabr">
			<and>
				<equals arg1="${target.use_csi}" arg2="true"/>
				<equals arg1="${target.include_pabr}" arg2="true"/>
			</and>
		</condition>
		<antcall target="${target.pabr}" />

		<condition property="pabr.included">
			<and>
				<equals arg1="${target.use_csi}" arg2="true"/>
				<equals arg1="${target.include_pabr}" arg2="true"/>
			</and>
		</condition>

		<!-- BEGIN: Include modulo di startup -->

		<antcall target="ecmengine-${target.application.server}-startup-module" />

		<!-- value="&lt;module&gt;&lt;ejb&gt;ecmengine-wls9-startup.jar&lt;/ejb&gt;&lt;/module&gt;"  -->
		<condition property="startup.module.element"
			value=""
			else="&lt;module&gt;&lt;ejb&gt;ecmengine-startup.sar&lt;/ejb&gt;&lt;/module&gt;" >
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<replace file="${project.dir.build.tmp}/ear/application.xml"
			token="@@startup_module@@" value="${startup.module.element}" />

		<replace file="${project.dir.build.tmp}/ear/application.xml" token="@@server_version@@" value="${server.version}" />

		<!-- END: Include modulo di startup -->

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/alfresco-shared.properties"
			tofile="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties"
		         token="@@avm_remote_port@@"
		         value="${target.avm.remote.port}" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-core-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml" />

		<condition property="partition" value="${target.cluster.partition}"
				else="ecmengine">
			<isset property="target.cluster.partition" />
		</condition>
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml"
			token="@@target@@" value="${target.cluster.partition}" />

		<!-- Replace per splitting -->
		<condition property="nodeservice.impl.bean" value="splitting"
			else="standard">
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition>

		<condition property="lucene.factory.splitting" value="Splitting" else="Standard">
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition>

		<condition property="nodeservice.interface"
			value="it.doqui.index.ecmengine.business.personalization.splitting.SplittingNodeService"
			else="org.alfresco.service.cmr.repository.NodeService" >
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition>

		<!-- Replace per security -->
		<condition property="permission.service.class"
			value="it.doqui.index.ecmengine.business.personalization.security.permissions.MultipleInheritancePermissionServiceImpl"
			else="org.alfresco.repo.security.permissions.impl.PermissionServiceImpl" >
			<equals arg1="${target.use_acl_multiple_inheritance}" arg2="true" />
		</condition>

		<condition property="permission.evaluator.afteracl.bean"
			value="afterAclStoredProc"
			else="afterAclStandard" >
			<equals arg1="${target.use_acl_filter_stored_procedure}" arg2="true" />
		</condition>

		<!-- Replace per encryption -->
		<property name="content.service.interface" value="it.doqui.index.ecmengine.business.personalization.encryption.CryptoContentService"/>
		<property name="content.service.impl"      value="it.doqui.index.ecmengine.business.personalization.encryption.content.CryptoContentServiceImpl"/>

		<!--
		<condition property="content.service.interface"
			value="it.doqui.index.ecmengine.business.personalization.encryption.CryptoContentService"
			else="org.alfresco.service.cmr.repository.ContentService" >
			<equals arg1="${target.use_encryption}" arg2="true" />
		</condition>
		<condition property="content.service.impl"
			value="it.doqui.index.ecmengine.business.personalization.encryption.content.CryptoContentServiceImpl"
			else="org.alfresco.repo.content.RoutingContentService" >
			<equals arg1="${target.use_encryption}" arg2="true" />
		</condition>
		-->

		<!-- Commento Indexer per splitting
		<condition property="nodeindexer.comment.split" value="" else="- -&gt;" >
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition>
		<condition property="nodeindexer.comment.split.not" value="- -&gt;" else="" >
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition> -->

		<!-- Commento Indexer per no splitting
		<condition property="nodeindexer.comment.plain" value="- -&gt;" else="" >
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition>
		<condition property="nodeindexer.comment.plain.not" value="" else="- -&gt;" >
			<equals arg1="${target.use_splitting}" arg2="true" />
		</condition> -->

		<!-- Numero di parti (settato e diverso da 0) -->
		<condition property="nodeservice.split.parts" value="${target.splitting.parts}"
			else="20" >
			<and>
				<isset property="target.splitting.parts" />
				<not>
					<equals arg1="${target.splitting.parts}" arg2="0" />
				</not>
			</and>
		</condition>

		<!-- Set IndexerAndSearcherFactory -->
		<condition property="lucene.indexer.mode" value="multiRepository" else="standard">
			<equals arg1="${target.use_multirepository}" arg2="true" />
		</condition>

		<condition property="lucene.indexer.fts.job.class"
			value="it.doqui.index.ecmengine.business.personalization.multirepository.index.lucene.fts.FTSIndexerJob"
			else="org.alfresco.repo.search.impl.lucene.fts.FTSIndexerJob" >
			<equals arg1="${target.use_multirepository}" arg2="true" />
		</condition>

		<!-- Set Hibernate Bytecode Provider -->
		<condition property="bytecode.provider" value="cglib" else="javassist">
			<equals arg1="${target.application.server}" arg2="weblogic" trim="true" />
		</condition>

		<!-- Copia dei file per replace -->
		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-node-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-content-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-public-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-repository-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-search-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-security-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-internal-scheduled-jobs-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml" />

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/application-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/application-context.xml" />

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/bootstrap-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/hibernate.properties"
			tofile="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" />

		<echo message="" />
		<echo message="NodeService interface: ${nodeservice.interface}" />
		<echo message="NodeService implementation: ${nodeservice.impl.bean}" />
		<echo message="NodeService split parts: ${nodeservice.split.parts}" />
		<echo message="" />
		<echo message="Lucene Multirepo ADM factory mode: ${lucene.factory.splitting}" />
		<echo message="Lucene Indexer mode: ${lucene.indexer.mode}" />
		<echo message="Lucene FTS Indexer job class: ${lucene.indexer.fts.job.class}" />
		<echo message="PermissionService class: ${permission.service.class}" />
		<echo message="Search ACL evaluator bean: ${permission.evaluator.afteracl.bean}" />
		<echo message="" />
		<echo message="Hibernate Bytecode Provider: ${bytecode.provider}" />
		<echo message="SQL USE Cache              : ${query.cache}" />
		<echo message="" />

		<!-- Replace splitting -->

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceImpl@@" value="${nodeservice.impl.bean}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceInterface@@" value="${nodeservice.interface}" />

		<!-- replace file="${project.dir.build.tmp}/ecmengine/replace/node-services-context.xml"
			token="@@plainNodeIndexerCommented@@" value="${nodeindexer.comment.plain}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/node-services-context.xml"
			token="@@plainNodeIndexerNotCommented@@" value="${nodeindexer.comment.plain.not}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/node-services-context.xml"
			token="@@splitNodeIndexerCommented@@" value="${nodeindexer.comment.split}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/node-services-context.xml"
			token="@@splitNodeIndexerNotCommented@@" value="${nodeindexer.comment.split.not}" /-->

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceBinding@@" value="${nodeservice.binding.bean}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@splitPartsCount@@" value="${nodeservice.split.parts}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
			token="@@isSplitting@@" value="${lucene.factory.splitting}" />

		<!-- Replace Lucene -->

		<!-- replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
			token="@@nodeServiceBinding@@" value="${nodeservice.splitting.bean}" / -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
			token="@@standardOrMultirepo@@" value="${lucene.indexer.mode}" />

		<!-- Replace scheduled jobs -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml"
			token="@@ftsIndexerJobClass@@" value="${lucene.indexer.fts.job.class}" />

		<!-- Replace encryption -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml"
			token="@@contentServiceClass@@" value="${content.service.impl}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml"
			token="@@contentServiceInterface@@" value="${content.service.interface}" />

		<!-- Replace security -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
			token="@@permissionServiceImplClass@@" value="${permission.service.class}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
			token="@@afterAclEvaluator@@" value="${permission.evaluator.afteracl.bean}" />

		<!-- Replace folder extenstion -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
		    token="@@extensionPath@@" value="${target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
		    token="@@extensionPath@@" value="${target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
		    token="@@extensionPath@@" value="${target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
		    token="@@extensionProtocol@@" value="${target.conf.external.protocol}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
		    token="@@extensionProtocol@@" value="${target.conf.external.protocol}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
		    token="@@extensionProtocol@@" value="${target.conf.external.protocol}" />

		<!-- Replace Hibernate Bytecode Provider -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" token="@@bytecode.provider@@" value="${bytecode.provider}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" token="@@query.cache@@"       value="${query.cache}" />


		<!-- WebLogic: extension must be inside the EAR archive -->
		<condition property="extension.root.dir" value="${project.dir.build.tmp}/external/${target.job.node.master}"
			else="${project.dir.build.tmp}/external/${target}" >
			<equals arg1="${target.cluster.clustered}" arg2="true"/>
		</condition>

		<condition property="ear.include.cooptrace" value="true">
			<equals arg1="${target.use.cooptrace}" arg2="true"/>
		</condition>

		<antcall target="security-jar" />

		<antcall target="massive-jar" />

		<property name="mtom.ejb.extension" value="${target.ejb.extension}" />
		<property name="lmtom.urltoconnect" value="${mtom.urltoconnect}" />
		<condition property="build.enable.mtom" value="true" else="false" >
			<equals arg1="${target.enable.mtom}" arg2="true"/>
		</condition>
		<antcall target="mtom-package-war-${build.enable.mtom}" />
		<ear destfile="${project.dir.build.archives}/${project.package.name}${target.ejb.extension}.ear"
		     appxml="${project.dir.build.tmp}/ear/application.xml"
		     manifest="${project.dir.conf}/application/META-INF/MANIFEST.MF">

			<!-- JBoss specific application descriptor -->
			<zipfileset file="${project.dir.conf}/application/META-INF/jboss-app.xml" prefix="META-INF" />

			<!-- WebLogic specific application descriptor -->
			<zipfileset file="${project.dir.conf}/application/META-INF/weblogic-application.xml" prefix="META-INF" />

			<fileset file="${project.dir.build.archives}/foundation-beans.jar"/>
			<fileset file="${project.dir.build.archives}/publishing-beans.jar"/>
			<fileset file="${project.dir.build.archives}/massive.jar"/>

			<zipfileset dir="${project.dir.build.archives}">
				<include name="security.jar" if="use.security" />
			</zipfileset>

			<zipfileset file="${project.dir.lib}/*.jar" prefix="${ear.lib}"
				excludes="commons-codec-1.2.jar,
						commons-logging-*.jar,
                        commons-httpclient-2*.jar,
						j2ee-1.3.jar,
						jcert-1.0.3.jar,
						jms-1.0.2b.jar,
						jndi-1.2.1.jar,
						jnet-1.0.3.jar,
						jsse-1.0.3.jar,
						junit-3.8.1.jar,
						log4j-*.jar,
						mail*.jar,
						jaas*.jar,
						ejb-*.jar,
						servlet-*.jar,
						csi*1.2.7.jar,
						csi-core-1.4.5.jar,
						csi-tools-1.4.5.jar,
						csi-ejb-1.4.5.jar,
						csi-rmi-1.4.5.jar,
						csi-apachesoap-1.4.5.jar,
						xsd2jibx-1.0.0.jar,
						backport-util-concurrent.jar,
						weblogic*.jar,
                        api-*.jar,
                        javelinx-*.jar,
                        webservices-*.jar,
                        wls-api-*.jar,
                        wlw-langx-*.jar,
                        wlw-plaf-*.jar,
                        wlw-util-*.jar,
                        bcelx-*.jar,
                        xbean-*.jar,
						jbossall-client-*.jar,
						jboss-j2ee-*.jar,
						xercesImpl-2.8.0.jar,
						jaxp-1.1.jar,
						jaxrpc-1.1.jar,
						activation-1.0.2.jar,
						jaxen-1.1-beta-4.jar,
                        jaxen-1.1.jar,
						alfresco-*-2.9B.jar,
						alfresco-*-2.9.2B.jar,
						alfresco-*481*.jar,
						xml-apis-1.3.3.jar,
						xmlParserAPIs-2.6.2.jar,
						jdbc2_0-stdext.jar,
						coop-trace-*.jar,${lib_mtom},${lib_mtom_dependences}" />

			<zipfileset dir="${project.dir.lib}" prefix="${ear.lib}">
				<include name="coop-trace-*.jar" if="ear.include.cooptrace" />
				<include name="commons-logging-1.0.4.jar" if="ear.include.cooptrace" />
				<include name="commons-logging-api-1.0.4.jar" if="ear.include.cooptrace" />
			</zipfileset>

			<zipfileset file="${project.dir.build.archives}/audit.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/audit-trail.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/multirepository.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/move-aggregation-job.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-security.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-splitting.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-encryption.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-hibernate.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-workflow.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/personalization-importer.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/job-manager.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/mimetype-manager.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/integrity-manager.jar" prefix="${ear.lib}"/>
			<zipfileset file="${project.dir.build.archives}/metadati-backup-job.jar" prefix="${ear.lib}"/>

			<!-- Modifica modo di includere librerie csi a causa del doppio deploy bea/jboss -->
			<zipfileset dir="${lib.csi}" prefix="${ear.lib}" >
				<include name="csi-apachesoap-1.4.5.jar" if="use.csi" />
				<include name="csi-core-1.4.5.jar" if="use.csi" />
				<include name="csi-ejb-1.4.5.jar" if="use.csi" />
				<include name="csi-rmi-1.4.5.jar" if="use.csi" />
				<include name="csi-tools-1.4.5.jar" if="use.csi" />
			</zipfileset>


			<zipfileset dir="${lib.cooptrace}" prefix="${ear.lib}" >
				<include name="coop-trace-1.2.2.jar" if="target.use.cooptrace" />
			</zipfileset>

			<zipfileset dir="${project.dir.build.archives}/included" >
				<include name="csi-beans.jar" if="use.csi" />
			</zipfileset>

			<!-- APP-INF/classes/alfresco oppure classes/alfresco -->
			<zipfileset file="${project.dir.conf.alfresco.internal}/alfresco/**"
				prefix="${ear.classes.alfresco}"
				excludes="application-context.xml,
						bootstrap-context.xml,
						alfresco-shared.properties" />

			<!-- Custom content model -->

			<zipfileset file="${project.dir.conf.alfresco.extension}/model/*.xml"
				prefix="${ear.classes.alfresco}/ecmengine-model" />

			<zipfileset file="${project.dir.conf.alfresco.extension}/*.xml"
				prefix="${ear.classes.alfresco}/ecmengine"
				excludes="ecmengine-core-services-context.xml,
								ecmengine-repository-context.xml,
								ecmengine-node-services-context.xml,
								ecmengine-content-services-context.xml,
								ecmengine-public-services-context.xml,
								ecmengine-search-context.xml,
								ecmengine-security-context.xml,
								ecmengine-internal-scheduled-jobs-context.xml" />

			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties"
							prefix="${ear.classes.alfresco}" />

			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml"
				prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
			    prefix="${ear.classes.alfresco}" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
			    prefix="${ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
			    prefix="${ear.classes.alfresco}" />

			<zipfileset dir="${project.dir.lib}" prefix="${ear.lib}" >
				<include name="backport-util-concurrent.jar" if="appserv.is.weblogic" />
				<include name="commons-logging-1.0.4.jar" if="appserv.is.weblogic" />
			</zipfileset>

			<zipfileset dir="${project.dir.build.archives}" >
				<include name="ecmengine-startup.sar" unless="appserv.is.weblogic" />
			</zipfileset>

			<!-- classes -->
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" prefix="${ear.classes}" />

			<!-- Include pa bridged web service -->
			<zipfileset dir="${project.dir.build.archives}">
				<include name="${project.package.name}_pabr.war" if="pabr.included"/>
			</zipfileset>
		</ear>
	</target>

	<!-- checkcode: effettua i controlli sul codice -->
	<target	name="checkcode" depends="init"
	        description="Verifica i parametri e le metriche di qualità del codice">
		<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle-all-4.3.jar" />

		<checkstyle	config="${project.dir.conf}/checkstyle/csi_checks.xml"
		            failOnViolation="false"
		            classpath="${classpath}">
			<fileset dir="${project.dir.src.java}" includes="**/*.java" />
			<formatter type="plain" />
		</checkstyle>
	</target>


	<!-- CREAZIONE PACCHETTI -->

	<target name="foundation-beans-jar"
		description="Crea l'EJB JAR per i bean di foundation.">

		<condition property="foundation.manifest.file"
				value="${project.dir.conf}/ejb/foundation-beans/META-INF/MANIFEST.MF-wl9"
				else="${project.dir.conf}/ejb/foundation-beans/META-INF/MANIFEST.MF" >
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>

		<mkdir dir="${project.dir.build.tmp}/foundation-beans"/>
		<copy file="${project.dir.conf}/ejb/foundation-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/foundation-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties"/>

		<replace file="${project.dir.build.tmp}/foundation-beans/jboss.xml" token="@@cluster_partition@@" value="${target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/foundation-beans/jboss.xml" token="@@clustered@@" value="${target.cluster.clustered}"/>

		<replace file="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

		<jar jarfile="${project.dir.build.archives}/foundation-beans.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/foundation/**,
			          it/${product.dir}/${project}/util/**"
			manifest="${foundation.manifest.file}" >

			<zipfileset file="${project.dir.build.tmp}/foundation-beans/jboss.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/META-INF/ejb-jar.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/META-INF/weblogic-ejb-jar.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/beanRefContext.xml" />
			<zipfileset file="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<target name="multirepository-jar" description="Crea il JAR per le classi del multirepository.">
		<mkdir dir="${project.dir.build.tmp}/multirepository"/>
		<jar jarfile="${project.dir.build.archives}/multirepository.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/multirepository/**" >
		</jar>
	</target>

	<target name="personalization-security-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di gestione delle ACL.">

		<condition property="dbms.is.oracle">
			<contains string="${target.db.dialect}" substring="Oracle" casesensitive="false" />
		</condition>

		<jar jarfile="${project.dir.build.archives}/personalization-security.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/security/**"
			manifest="${project.dir.conf}/jar/personalization-security/META-INF/MANIFEST.MF">
			<zipfileset dir="${project.dir.src.java}/it/${product.dir}/${project}/business/personalization/security/acl/"
				fullpath="it/${product.dir}/${project}/business/personalization/security/acl/AclCheck.hbm.xml">
				<include name="AclCheck.hbm.xml" unless="dbms.is.oracle" />
				<include name="AclCheckOracle.hbm.xml" if="dbms.is.oracle" />
			</zipfileset>
		</jar>
	</target>

	<target name="personalization-splitting-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di splitting dei nodi.">

		<jar jarfile="${project.dir.build.archives}/personalization-splitting.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/splitting/**"
			manifest="${project.dir.conf}/jar/personalization-splitting/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="personalization-hibernate-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di crittografia dei contenuti.">

		<jar jarfile="${project.dir.build.archives}/personalization-hibernate.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/hibernate/**"
			manifest="${project.dir.conf}/jar/personalization-hibernate/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="personalization-encryption-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di crittografia dei contenuti.">

		<jar jarfile="${project.dir.build.archives}/personalization-encryption.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/encryption/**"
			manifest="${project.dir.conf}/jar/personalization-encryption/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="personalization-workflow-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di workflow.">

		<jar jarfile="${project.dir.build.archives}/personalization-workflow.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/workflow/**">
		</jar>
	</target>

	<target name="personalization-importer-jar"
		description="Crea il JAR contenente le personalizzazioni per l'importazione di contenuti.">

		<jar jarfile="${project.dir.build.archives}/personalization-importer.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/importer/**">
		</jar>
	</target>

	<target name="job-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dei job.">

		<jar jarfile="${project.dir.build.archives}/job-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/job/**,
			it/${product.dir}/${project}/integration/job/dao/JobDAO.class,
			it/${product.dir}/${project}/integration/job/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/job/vo/JobVO.hbm.xml"/>
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/job/vo/JobParamVO.hbm.xml"/>
		</jar>
	</target>

	<target name="mimetype-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dei mimetype.">

		<jar jarfile="${project.dir.build.archives}/mimetype-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/mimetype/**,
			it/${product.dir}/${project}/business/personalization/mimetype/**,
			it/${product.dir}/${project}/integration/mimetype/dao/**,
			it/${product.dir}/${project}/integration/mimetype/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/mimetype/vo/MimetypeVO.hbm.xml"/>
		</jar>
	</target>

	<target name="integrity-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dell'integrity.">

		<jar jarfile="${project.dir.build.archives}/integrity-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/integrity/**,
			it/${product.dir}/${project}/business/personalization/integrity/**,
			it/${product.dir}/${project}/integration/integrity/dao/**,
			it/${product.dir}/${project}/integration/integrity/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/integrity/vo/Integrity*VO.hbm.xml"/>
		</jar>
	</target>

	<target name="security-jar"
		description="Crea il JAR contenente le classi di business e integration per la gestione dei servizi massivi.">
		<condition property="security.module" value="&lt;module&gt;&lt;ejb&gt;security.jar&lt;/ejb&gt;&lt;/module&gt;" else="" >
 			<equals arg1="${target.enable.security}" arg2="true" />
		</condition>
		<replace file="${project.dir.build.tmp}/ear/application.xml" token="@@security_module@@" value="${security.module}" />

		<mkdir dir="${project.dir.build.tmp}/security"/>
		<copy file="${project.dir.conf}/ejb/security/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/security/jboss.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/security/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/security/ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/security/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@cluster_partition@@" value="${target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@clustered@@" value="${target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<copy file="${project.dir.conf}/jar/pd_dosign.xml" tofile="${project.dir.build.tmp}/security/pd_dosign.xml"/>
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_url_to_connect@@" value="${dosign_url_to_connect}" />
		<!--
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_context_factory@@" value="${dosign_context_factory}" />
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_cluster_partition@@" value="${dosign_target.cluster.partition}" />
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_disable_discovery@@" value="${dosign_disable_discovery}" />
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_ejbextension@@" value="${dosign_target.ejb.extension}" />
		-->
		<jar jarfile="${project.dir.build.archives}/security.jar"
			basedir="${project.dir.build.classes}"
			manifest="${project.dir.conf}/ejb/security/META-INF/MANIFEST.MF"
			includes="it/${product.dir}/${project}/business/publishing/security/**,
			it/${product.dir}/${project}/util/**,
			it/${product.dir}/${project}/integration/security/**,
			it/${product.dir}/${project}/integration/exception/**">
			<zipfileset file="${project.dir.build.tmp}/security/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/security/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" prefix="META-INF" />
			<fileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
			<fileset file="${project.dir.build.tmp}/security/pd_dosign.xml" />
		</jar>
	</target>

	<target name="massive-jar"
		description="Crea il JAR contenente le classi di business e integration per la gestione dei servizi massivi.">
		<mkdir dir="${project.dir.build.tmp}/massive"/>

		<copy file="${project.dir.conf}/ejb/massive/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/massive/jboss.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/massive/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/massive/ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/massive/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@cluster_partition@@" value="${target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@clustered@@" value="${target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>

		<jar jarfile="${project.dir.build.archives}/massive.jar"
			basedir="${project.dir.build.classes}"
			manifest="${project.dir.conf}/ejb/massive/META-INF/MANIFEST.MF"
			includes="it/${product.dir}/${project}/business/publishing/massive/**,
                      it/${product.dir}/${project}/util/**,
                      it/${product.dir}/${project}/integration/massive/**,
                      it/${product.dir}/${project}/integration/exception/**">
			<zipfileset file="${project.dir.build.tmp}/massive/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/massive/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" prefix="META-INF" />
			<fileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<!-- Target per la crazione dei client da distribuire ai fruitor dei serivi dell'ECMENGINE-->
	<target name="all-client-jar" depends="init-target,compile-all">
        <antcall target="all-client-jar-${target.build.ear}" />
	</target>

	<target name="all-client-jar-single-instance">
        <antcall target="clean-temp"/>
		<antcall target="create-all-client-jar"/>
	</target>
	<target name="all-client-jar-online">
        <antcall target="clean-temp"/>
		<antcall target="create-all-client-jar"/>
	</target>
	<target name="all-client-jar-batch">
        <antcall target="clean-temp"/>
		<antcall target="batch-create-all-client-jar"/>
	</target>
	<target name="all-client-jar-both">
		<antcall target="all-client-jar-online"/>
		<antcall target="all-client-jar-batch"/>
	</target>

	<target name="create-all-client-jar">
		<mkdir dir="${project.dir.build.tmp}"/>
		<mkdir dir="${project.dir.build.tmp}/client"/>
		<copy file="${project.dir.conf}/client/client.properties" tofile="${project.dir.build}/temp/client/client.properties"/>
		<replace file="${project.dir.build}/temp/client/client.properties" token="@@target.ejb.extension@@" value="${target.ejb.extension}"/>
		<antcall target="engine-client-jar"/>
		<antcall target="backoffice-client-jar"/>

		<mkdir dir="${project.dir.build.archives}" />

		<jar jarfile="${project.dir.build.archives}/ecmengine-common-${client.version}.jar"
			manifest="${project.dir.conf}/jar/ecmengine-common/META-INF/MANIFEST.MF"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/dto/*.class,
  					  it/${product.dir}/${project}/exception/**,
					  it/${product.dir}/${project}/util/**,
					  ${project.dir.build}/temp/client/client.properties"
			excludes="${exclude_security}
                     "
                     >
			<zipfileset dir="${project.dir.build.tmp}/client">
				<include name="client.properties"/>
			</zipfileset>
		</jar>

		<!-- at20070806 aggiunto, nel caso la configurazione sia con CSI Infrastructure, la creazione del pacchetto
		     contenente le porte di CSI Infrastructure -->
		<condition property="target.csi.porte.package"
		           value="package-porte-csi"
				   else="package-no-porte-csi">
			<equals arg1="${target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione pacchetti per distribuzione porte delegate di CSI Framework"/>
		<echo message="target richiamato ${target.csi.porte.package}"/>
		<antcall target="${target.csi.porte.package}" />

		<!-- at20070806 aggiunto pacchetto zip di distribuzione delle librerie client -->
		<zip destfile="${project.dir.dist.target}/${client.library.name}.zip">
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine-backoffice-client-${client.version}.jar,
				          ecmengine-engine-client-${client.version}.jar,
				          ecmengine-common-${client.version}.jar" />
		</zip>
	</target>

	<target name="batch-create-all-client-jar">
		<mkdir dir="${project.dir.build.tmp}"/>
		<mkdir dir="${project.dir.build.tmp}/client"/>
		<copy file="${project.dir.conf}/client/client.properties" tofile="${project.dir.build}/temp/client/client.properties"/>
		<replace file="${project.dir.build}/temp/client/client.properties" token="@@target.ejb.extension@@" value="${batch.target.ejb.extension}"/>
		<antcall target="engine-client-jar"/>
		<antcall target="backoffice-client-jar"/>

		<mkdir dir="${project.dir.build.archives}" />

		<jar jarfile="${project.dir.build.archives}/ecmengine-common-${client.version}.jar"
			manifest="${project.dir.conf}/jar/ecmengine-common/META-INF/MANIFEST.MF"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/dto/*.class,
  					  it/${product.dir}/${project}/exception/**,
					  it/${product.dir}/${project}/util/**,
					  ${project.dir.build}/temp/client/client.properties"
			excludes="${exclude_security}
                     "
                     >
			<zipfileset dir="${project.dir.build.tmp}/client">
				<include name="client.properties"/>
			</zipfileset>
		</jar>

		<!-- at20070806 aggiunto, nel caso la configurazione sia con CSI Infrastructure, la creazione del pacchetto
		     contenente le porte di CSI Infrastructure -->
		<condition property="target.csi.porte.package"
		           value="package-porte-csi"
				   else="package-no-porte-csi">
			<equals arg1="${target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione pacchetti per distribuzione porte delegate di CSI Framework"/>
		<echo message="target richiamato ${target.csi.porte.package}"/>
		<antcall target="${target.csi.porte.package}" />

		<copy file="${project.dir.build.archives}/ecmengine-common-${client.version}.jar"
            tofile="${project.dir.build.archives}/ecmengine${batch.target.ejb.extension}-common-${client.version}.jar"
            overwrite="true" />
		<copy file="${project.dir.build.archives}/ecmengine-backoffice-client-${client.version}.jar"
            tofile="${project.dir.build.archives}/ecmengine${batch.target.ejb.extension}-backoffice-client-${client.version}.jar"
            overwrite="true" />
		<copy file="${project.dir.build.archives}/ecmengine-engine-client-${client.version}.jar"
            tofile="${project.dir.build.archives}/ecmengine${batch.target.ejb.extension}-engine-client-${client.version}.jar"
            overwrite="true" />

		<!-- at20070806 aggiunto pacchetto zip di distribuzione delle librerie client -->
		<zip destfile="${project.dir.dist.target}/${client.library.name}${batch.target.ejb.extension}.zip">
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine${batch.target.ejb.extension}-backoffice-client-${client.version}.jar,
				          ecmengine${batch.target.ejb.extension}-engine-client-${client.version}.jar,
				          ecmengine${batch.target.ejb.extension}-common-${client.version}.jar" />
		</zip>
	</target>

	<target name="backoffice-client-jar">
		<echo message="Creazione archivio jar libreria client del backoffice"/>
		<echo message="target richiamato ${target.csi.backoffice.client.include}"/>
		<antcall target="ejbinterface-backoffice" />
	</target>

	<target name="engine-client-jar">
		<echo message="Creazione archivio jar libreria client management"/>
		<echo message="target richiamato ${target.csi.management.client.include}"/>
		<antcall target="ejbinterface-management" />
	</target>

	<target name="publishing-beans-jar" depends="foundation-beans-jar">

		<mkdir dir="${project.dir.build.tmp}/publishing-beans"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/publishing-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml"/>
		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>

		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@cluster_partition@@" value="${target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@clustered@@" value="${target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

		<jar jarfile="${project.dir.build.archives}/publishing-beans.jar"
				 manifest="${project.dir.conf}/ejb/publishing-beans/META-INF/MANIFEST.MF"
				 basedir="${project.dir.build.classes}"
				 includes="it/${product.dir}/${project}/business/publishing/management/**,
				           it/${product.dir}/${project}/business/publishing/search/**,
				           it/${product.dir}/${project}/business/publishing/backoffice/**,
				           it/${product.dir}/${project}/business/publishing/util/**,
				           it/${product.dir}/${project}/business/publishing/*.class,
		                   it/${product.dir}/${project}/dto/**,
	                       it/${product.dir}/${project}/exception/**,
				           it/${product.dir}/${project}/exception/security**,
				           it/${product.dir}/${project}/util/**">

			<zipfileset file="${project.dir.build.tmp}/publishing-beans/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.conf}/ejb/publishing-beans/filtered-system-props.properties" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<target name="csi-beans-jar"
	        description="Compila e pacchettizza le porte applicative CSI">
		<condition property="target.customer_line"
		           value=""
		           else="${target.customer_line}">
			<equals arg1="${target.customer_line}" arg2="${target.customer_line}"/>
		</condition>

		<mkdir dir="${project.dir.build.tmp}/csi-beans"/>

		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginesecurity.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginemassive.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginemanagement.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginebackoffice.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginesearch.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml"/>

		<antcall target="pa-cooptrace-${target.use.cooptrace}" />
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/csi-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/csi-beans/ejb-jar.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml"/>

		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@cluster_partition@@" value="${target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@clustered@@" value="${target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>

		<jar jarfile="${project.dir.build.archives}/included/csi-beans.jar"
			 manifest="${project.dir.conf}/ejb/csi-beans/META-INF/MANIFEST.MF"
			 basedir="${project.dir.build.classes}"
		     includes="it/${product.dir}/${project}/interfacecsi/management/**,
			           it/${product.dir}/${project}/interfacecsi/search/**,
			           it/${product.dir}/${project}/interfacecsi/backoffice/**,
					   it/${product.dir}/${project}/interfacecsi/security/**,
					   it/${product.dir}/${project}/interfacecsi/massive/**">

			<!-- PA -->
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/jboss.xml" prefix="META-INF" />
		</jar>

	</target>

	<target name="pa-cooptrace-true">
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@cooptrace_begin@@" value="" />

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@cooptrace_end@@" value="" />
	</target>

	<target name="pa-cooptrace-false">
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@cooptrace_end@@" value="--&gt;" />
	</target>

	<!-- Modifica (in base al target dei deploy) e pacchettizza i file di extension di alfresco -->
	<target name="extension-external">
		<condition property="target.extension.external"
		           value="extension-external-clustered"
		           else="extension-external-not-clustered">
			<equals arg1="${target.cluster.clustered}" arg2="true"/>
		</condition>

		<antcall target="${target.extension.external}" />
	</target>

	<target name="extension-external-not-clustered">
		<mkdir dir="${project.dir.build.tmp}/external/${target}"/>
        <!-- Replace per Terracotta -->
        <condition property="terracotta.rem.ftsIndexerTrigger" value="&lt;bean id=&quot;ftsIndexerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${target.use_terracotta}" arg2="true" />
        </condition>
        <condition property="terracotta.rem.indexTrackerTrigger" value="&lt;bean id=&quot;admIndexTrackerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${target.use_terracotta}" arg2="true" />
        </condition>
        <!-- Replace per Terracotta -->
        <!-- Replace per Audit -->
		<condition property="exclude_audit_on_value" value="&lt;!--" else="" >
 			<equals arg1="${target.enable.audit}" arg2="true" />
		</condition>
		<condition property="exclude_audit_off_value" value="--&gt;" else="" >
 			<equals arg1="${target.enable.audit}" arg2="true" />
		</condition>
        <!-- Replace per Audit -->

		<copy todir="${project.dir.build.tmp}/external/${target}" overwrite="true">
			<fileset dir="${project.dir.conf.alfresco.extension.external}" >
				<exclude name="index-tracking-context.xml" />
				<exclude name="custom-slavenode-scheduled-jobs-context.xml" />
			</fileset>

			<filterset begintoken="@@" endtoken="@@">
				<filter token="target.dir.root"     value="${target.dir.root}" />
				<filter token="target.dir.index"    value="${target.dir.index}" />

				<filter token="target.db.url"       value="${target.db.url}" />
				<filter token="target.db.usr"       value="${target.db.usr}" />
				<filter token="target.db.pwd"       value="${target.db.pwd}" />
				<filter token="target.db.driver"    value="${target.db.driver}" />
				<filter token="target.db.dialect"   value="${target.db.dialect}" />
				<filter token="target.db.validation.query"   value="${target.db.validation.query}" />

				<filter token="target.db.pool.initial"  value="${target.db.pool.initial}" />
				<filter token="target.db.pool.max"      value="${target.db.pool.max}"     />
				<filter token="target.db.pool.timeout"  value="${target.db.pool.timeout}" />

				<filter token="target.db.url.primary"       value="${target.db.url.primary}" />
				<filter token="target.db.usr.primary"       value="${target.db.usr.primary}" />
				<filter token="target.db.pwd.primary"       value="${target.db.pwd.primary}" />
				<filter token="target.db.driver.primary"    value="${target.db.driver.primary}" />
				<filter token="target.db.validation.query.primary"   value="${target.db.validation.query.primary}" />

				<filter token="target.db.url.secondary"       value="${target.db.url.secondary}" />
				<filter token="target.db.usr.secondary"       value="${target.db.usr.secondary}" />
				<filter token="target.db.pwd.secondary"       value="${target.db.pwd.secondary}" />
				<filter token="target.db.driver.secondary"    value="${target.db.driver.secondary}" />
				<filter token="target.db.validation.query.secondary"   value="${target.db.validation.query.secondary}" />
				<filter token="target.audit.max.rolling.rows" value="${target.audit.max.rolling.rows}" />
				<filter token="target.audit.trail.max.rolling.rows" value="${target.audit.trail.max.rolling.rows}" />

				<filter token="target.cluster.node" value="${target}" />

				<filter token="target.conf.external.path" value="${target.conf.external.path}" />
				<filter token="target.conf.external.protocol" value="${target.conf.external.protocol}" />

				<filter token="fileformat.config.file" value="${fileformat.config.file}" />
				<filter token="fileformat.signature.file" value="${fileformat.signature.file}" />

				<filter token="DROID_SIGNATURE_FILE" value="${fileformat.signature.file}" />
				<filter token="PROXY_HOST" value="${fileformat.proxy.host}" />
				<filter token="PROXY_PORT" value="${fileformat.proxy.port}" />

    			<filter token="rem.terracotta.ftsIndexerTrigger"   value="${terracotta.rem.ftsIndexerTrigger}" />
    			<filter token="rem.terracotta.indexTrackerTrigger" value="${terracotta.rem.indexTrackerTrigger}" />

    			<filter token="exclude_audit_on"  value="${exclude_audit_on_value}"  />
    			<filter token="exclude_audit_off" value="${exclude_audit_off_value}" />

                <!-- In caso di online-batch occorre disabilitare le cache SQL -->
				<filter token="query.cache" value="${query.cache}" />

			</filterset>
		</copy>

		<copy file="${project.dir.build.tmp}/external/${target}/${target.repository.definition}-repository-definition.xml"
			tofile="${project.dir.build.tmp}/external/${target}/repository-definition.xml">
		</copy>

		<tar destfile="${project.dir.build.archives.alfresco_extension_external}/${target}.tar"
			basedir="${project.dir.build.tmp}/external/${target}" />
	</target>

	<target name="extension-external-clustered">
        <!-- Replace per Terracotta -->
        <condition property="terracotta.rem.ftsIndexerTrigger" value="&lt;bean id=&quot;ftsIndexerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${target.use_terracotta}" arg2="true" />
        </condition>
        <condition property="terracotta.rem.indexTrackerTrigger" value="&lt;bean id=&quot;admIndexTrackerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${target.use_terracotta}" arg2="true" />
        </condition>
        <!-- Replace per Terracotta -->
        <!-- Replace per Audit -->
		<condition property="exclude_audit_on_value" value="&lt;!--" else="" >
 			<equals arg1="${target.enable.audit}" arg2="true" />
		</condition>
		<condition property="exclude_audit_off_value" value="--&gt;" else="" >
 			<equals arg1="${target.enable.audit}" arg2="true" />
		</condition>
        <!-- Replace per Audit -->

		<for list="${target.cluster.nodes}" param="target.cluster.node" trim="true">
			<sequential>
				<echo>Configurazione del nodo: @{target.cluster.node}</echo>

				<!-- condizione che consente di includere il file di definizione dei job
			    custom solo su un singolo nodo-->
				<condition property="custom.jobs.excluded" >
						<equals arg1="${target.job.node.master}" arg2="@{target.cluster.node}" trim="true" />
				</condition>

				<echo>custom.jobs.excluded = '${custom.jobs.excluded}'</echo>
				<echo>target.job.node.master = '${target.job.node.master}'</echo>
				<echo>target.cluster.node = '@{target.cluster.node}'</echo>
				<mkdir dir="${project.dir.build.tmp}/external/@{target.cluster.node}"/>
				<copy todir="${project.dir.build.tmp}/external/@{target.cluster.node}" overwrite="true">
					<fileset dir="${project.dir.conf.alfresco.extension.external}" >
						<exclude name="custom-scheduled-jobs-context.xml"           unless="custom.jobs.excluded"/>
						<exclude name="custom-slavenode-scheduled-jobs-context.xml"     if="custom.jobs.excluded"/>
					</fileset>

					<filterset begintoken="@@@@" endtoken="@@@@">
						<filter token="target.dir.root"     value="${target.dir.root}" />
						<filter token="target.dir.index"    value="${target.dir.index}" />

						<filter token="target.db.url"       value="${target.db.url}" />
						<filter token="target.db.usr"       value="${target.db.usr}" />
						<filter token="target.db.pwd"       value="${target.db.pwd}" />
						<filter token="target.db.driver"    value="${target.db.driver}" />
						<filter token="target.db.dialect"   value="${target.db.dialect}" />
						<filter token="target.db.validation.query"   value="${target.db.validation.query}" />

                        <filter token="target.db.pool.initial"  value="${target.db.pool.initial}" />
                        <filter token="target.db.pool.max"      value="${target.db.pool.max}"     />
                        <filter token="target.db.pool.timeout"  value="${target.db.pool.timeout}" />

						<filter token="target.db.url.primary"       value="${target.db.url.primary}" />
						<filter token="target.db.usr.primary"       value="${target.db.usr.primary}" />
						<filter token="target.db.pwd.primary"       value="${target.db.pwd.primary}" />
						<filter token="target.db.driver.primary"    value="${target.db.driver.primary}" />
						<filter token="target.db.validation.query.primary"   value="${target.db.validation.query.primary}" />

						<filter token="target.db.url.secondary"       value="${target.db.url.secondary}" />
						<filter token="target.db.usr.secondary"       value="${target.db.usr.secondary}" />
						<filter token="target.db.pwd.secondary"       value="${target.db.pwd.secondary}" />
						<filter token="target.db.driver.secondary"    value="${target.db.driver.secondary}" />
						<filter token="target.db.validation.query.secondary"   value="${target.db.validation.query.secondary}" />
						<filter token="target.audit.max.rolling.rows" value="${target.audit.max.rolling.rows}" />
						<filter token="target.audit.trail.max.rolling.rows" value="${target.audit.trail.max.rolling.rows}" />

						<filter token="target.cluster.node" value="@{target.cluster.node}" />

						<filter token="ehcache.multicast_group_address.ip"
							value="${target.cluster.ehcache.multicast_group_address.ip}" />
						<filter token="ehcache.multicast_group_address.port"
							value="${target.cluster.ehcache.multicast_group_address.port}" />
						<filter token="ehcache.multicast_group_address.port.primary"
							value="${target.cluster.ehcache.multicast_group_address.port.primary}" />
						<filter token="ehcache.multicast_group_address.port.secondary"
							value="${target.cluster.ehcache.multicast_group_address.port.secondary}" />

						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.ip"
							value="${target.cluster.@{target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.ip}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port"
							value="${target.cluster.@{target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port.primary"
							value="${target.cluster.@{target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port.primary}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port.secondary"
							value="${target.cluster.@{target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port.secondary}" />

						<filter token="target.conf.external.path" value="${target.conf.external.path}" />
						<filter token="target.conf.external.protocol" value="${target.conf.external.protocol}" />

						<filter token="fileformat.config.file" value="${fileformat.config.file}" />
						<filter token="fileformat.signature.file" value="${fileformat.signature.file}" />

						<filter token="DROID_SIGNATURE_FILE" value="${fileformat.signature.file}" />
						<filter token="PROXY_HOST" value="${fileformat.proxy.host}" />
						<filter token="PROXY_PORT" value="${fileformat.proxy.port}" />

            			<filter token="rem.terracotta.ftsIndexerTrigger"   value="${terracotta.rem.ftsIndexerTrigger}" />
            			<filter token="rem.terracotta.indexTrackerTrigger" value="${terracotta.rem.indexTrackerTrigger}" />

                        <filter token="exclude_audit_on"  value="${exclude_audit_on_value}"  />
                        <filter token="exclude_audit_off" value="${exclude_audit_off_value}" />

                        <!-- In caso di online-batch occorre disabilitare le cache SQL -->
                        <filter token="query.cache" value="${query.cache}" />

					</filterset>
				</copy>

				<copy file="${project.dir.build.tmp}/external/@{target.cluster.node}/${target.repository.definition}-repository-definition.xml"
					tofile="${project.dir.build.tmp}/external/@{target.cluster.node}/repository-definition.xml">
				</copy>

				<tar destfile="${project.dir.build.archives.alfresco_extension_external}/@{target.cluster.node}${target.ejb.extension}.tar"
					basedir="${project.dir.build.tmp}/external/@{target.cluster.node}" />

				<!-- La property custom.jobs.excluded deve essere ripulita, altrimenti rimane il vecchio valore
				all'interno del ciclo -->
				<var name="custom.jobs.excluded" unset="true" />

			</sequential>
		</for>
	</target>

	<!-- Creazione dei javadoc dei servizi applicativi (AFS rimappati per l'ECMENGINE) -->
	<target name="javadoc-servizi-applicativi" depends="init">
		<javadoc sourcepath="${project.dir.src.java}"
			destdir="${project.dir.docs.servizi-applicativi}"
			classpath="${classpath};lib/ant-1.6.5.jar"
			packagenames="it.doqui.index.ecmengine.business.foundation,
            			  it.doqui.index.ecmengine.business.foundation.contentmanagement,
			              it.doqui.index.ecmengine.business.foundation.security,
			              it.doqui.index.ecmengine.business.foundation.search,
			              it.doqui.index.ecmengine.business.foundation.repository,
			              it.doqui.index.ecmengine.exception,
			              it.doqui.index.ecmengine.exception.security,
			              it.doqui.index.ecmengine.exception.search,
			              it.doqui.index.ecmengine.exception.repository,
			              it.doqui.index.ecmengine.util,
			              it.doqui.index.ecmengine.business.personalization.*"
			author="true"
			access="protected">
		</javadoc>
	</target>

	<!-- Creazione dei javadoc dei servizi orchestratori dei servizi applicativi -->
	<target name="javadoc-servizi-orchestrati" depends="init">
		<javadoc sourcepath="${project.dir.src.java}"
			destdir="${project.dir.docs.servizi-business}"
			classpath="${classpath}"
			packagenames="it.doqui.index.ecmengine.client.engine,
						  it.doqui.index.ecmengine.client.engine.util,
						  it.doqui.index.ecmengine.client.engine.exception,
			              it.doqui.index.ecmengine.client.backoffice,
			              it.doqui.index.ecmengine.client.backoffice.util,
			              it.doqui.index.ecmengine.client.backoffice.exception,
			              it.doqui.index.ecmengine.dto.*,
            			  it.doqui.index.ecmengine.util.*,
						  it.doqui.index.ecmengine.exception,
						  it.doqui.index.ecmengine.exception.publishing.*,
			              it.doqui.index.ecmengine.business.publishing,
			              it.doqui.index.ecmengine.business.publishing.backoffice,
			              it.doqui.index.ecmengine.business.publishing.management,
			              it.doqui.index.ecmengine.business.publishing.search,
			              it.doqui.index.ecmengine.business.publishing.util"
			author="true"
			access="protected">
		</javadoc>
	</target>

	<target name="ecmengine-jboss-startup-module" description="Crea il SAR per lo startup del context su JBoss">

		<jar jarfile="${project.dir.build.archives}/ecmengine-startup.sar"
			manifest="${project.dir.conf}/sar/ecmengine-startup/META-INF/MANIFEST.MF"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/startup/jboss/**" >
			<zipfileset file="${project.dir.conf}/sar/ecmengine-startup/META-INF/*.xml" prefix="META-INF" />
		</jar>
	</target>

	<target name="ecmengine-weblogic-startup-module" description="Crea il JAR contenente il listenere per lo startup del context su WLS9.2">
		<javac srcdir="${project.dir.src.java}"
			destdir="${project.dir.build.classes}"
			classpath="${classpath};lib/weblogic-9.2.2.0.jar"
			includes="it/${product.dir}/${project}/business/startup/weblogic/**"
			debug="on"
			fork="yes"
			executable="${env.JAVA_HOME_SERVER}/bin/javac"/>

		<jar jarfile="${project.dir.build.archives}/publishing-beans.jar"
			update="true"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/startup/weblogic/**" >
			<zipfileset file="${project.dir.conf}/jar/ecmengine-wls9-startup/META-INF/beanRefContext.xml" prefix="META-INF" />
		</jar>
	</target>

	<target name="audit-trail-jar" description="Crea il jar contenenti le classi che si occupano di eseguire l'audit trail">

		<jar jarfile="${project.dir.build.archives}/audit-trail.jar" manifest="${project.dir.conf}/audit-trail/META-INF/MANIFEST.MF"
				basedir="${project.dir.build.classes}"
			    includes="it/${product.dir}/${project}/business/audit/AuditTrailManager.class,
                          it/${product.dir}/${project}/business/audit/AuditTrailManagerNull.class,
                          it/${product.dir}/${project}/business/audit/AuditTrailBusinessInterface.class,
                          it/${product.dir}/${project}/business/audit/util/AuditDtoHelper.class,
                          it/${product.dir}/${project}/dto/engine/audit/AuditInfo.class,
                          it/${product.dir}/${project}/integration/audittrail/dao/**,
                          it/${product.dir}/${project}/integration/audittrail/vo/**,
                          it/${product.dir}/${project}/exception/publishing/engine/management/AuditTrailException.class">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/audittrail/vo/AuditTrailVO.hbm.xml"/>
		</jar>
	</target>

	<target name="move-aggregation-job-jar" description="Crea il jar contenenti le classi per il job di spostamento di strutture aggregative">

		<jar jarfile="${project.dir.build.archives}/move-aggregation-job.jar" manifest="${project.dir.conf}/move-aggregation-job/META-INF/MANIFEST.MF"
						basedir="${project.dir.build.classes}"
					    includes="it/${product.dir}/${project}/business/job/ServerInfoManager.class,it/${product.dir}/${project}/business/job/move/**,
			                      it/${product.dir}/${project}/exception/publishing/engine/management/MoveException.class,
			it/${product.dir}/${project}/dto/ServerInfo.class,it/${product.dir}/${project}/exception/ServerInfoException.class,
			it/${product.dir}/${project}/integration/server/dao/ServerDAO.class,
			it/${product.dir}/${project}/integration/job/dao/JobOnNodeDAO.class,
			it/${product.dir}/${project}/integration/util/EcmEngineDAOConstants.class,
            it/${product.dir}/${project}/integration/util/AbstractDAO.class">
		</jar>
	</target>

	<target name="xsd2java" description="Genera la classi che corrispondono all'xsd">
	 	<java classname="org.jibx.xsd2jibx.Generate" fork="true" failonerror="true" jvm="${env.JAVA_HOME_SERVER}/bin/java">
	 		<arg line="-d ./src/java -n it.doqui.index.ecmengine.business.job.backup.util"/>
	 		<arg value="./conf/metadati-backup-job/xsd/metadati.xsd"/>
	 		<classpath>
	 		   <pathelement location="./lib/xsd2jibx-1.0.0.jar"/>
	 		   <pathelement location="./lib/jibx-run-2.1.jar"/>
               <pathelement location="./lib/xpp3-1.1.3_8.jar"/>
 			   <pathelement location="./lib/jaxme-js-0.3.jar"/>
	 		</classpath>
	 	</java>

        <javac srcdir="${project.dir.src.java}"
						destdir="${project.dir.build.classes}"
						classpath="${classpath}"
						includes="it/${product.dir}/${project}/business/job/backup/util/*"
        	            optimize="on"
						compiler="modern"
						fork="yes"
						executable="${env.JAVA_HOME_SERVER}/bin/javac"/>

		<move file="${project.dir.src.java}/it/${product.dir}/${project}/business/job/backup/util/binding.xml"
			todir="${project.dir.build.classes}/it/${product.dir}/${project}/business/job/backup/util/"/>
	</target>

	<target name="bind" description="data binding" depends="xsd2java">
	 <java classname="org.jibx.binding.Compile" fork="true" failonerror="true" jvm="${env.JAVA_HOME_SERVER}/bin/java">
	 	<arg value="${project.dir.build.classes}/it/${product.dir}/${project}/business/job/backup/util/binding.xml"/>
	 	<classpath>
	 		<pathelement path="${project.dir.build.classes}"/>
	 		<pathelement location="./lib/jibx-bind-2.1.jar"/>
	 		<pathelement location="./lib/jibx-run-2.1.jar"/>
	 	    <pathelement location="./lib/xpp3-1.1.3_8.jar"/>
	 	 	<pathelement location="./lib/bcel-5.1.jar"/>
	 	</classpath>
	 </java>
	</target>

	<target name="metadati-backup-job-jar" depends="bind" description="Crea il jar contenenti le classi per il job di backup dei metadati">


		<jar jarfile="${project.dir.build.archives}/metadati-backup-job.jar" manifest="${project.dir.conf}/metadati-backup-job/META-INF/MANIFEST.MF"
					basedir="${project.dir.build.classes}"
					includes="it/${product.dir}/${project}/business/job/backup/**,
						it/${product.dir}/${project}/business/job/ServerInfoManager.class,
						it/${product.dir}/${project}/dto/ServerInfo.class,
						it/${product.dir}/${project}/exception/ServerInfoException.class,
						it/${product.dir}/${project}/integration/server/dao/ServerDAO.class,
						it/${product.dir}/${project}/integration/job/dao/JobOnNodeDAO.class,
						it/${product.dir}/${project}/integration/util/EcmEngineDAOConstants.class,
			            it/${product.dir}/${project}/integration/util/AbstractDAO.class">
		</jar>
	</target>

	<target name="audit-jar" description="Crea il jar contenenti le classi che si occupano di eseguire l'audit">

		<jar jarfile="${project.dir.build.archives}/audit.jar"
					 manifest="${project.dir.conf}/audit/META-INF/MANIFEST.MF"
					 basedir="${project.dir.build.classes}"
				     includes="it/${product.dir}/${project}/business/audit/AuditManager.class,
							   it/${product.dir}/${project}/business/audit/AuditManagerNull.class,
							   it/${product.dir}/${project}/business/audit/AuditBusinessInterface.class,
							   it/${product.dir}/${project}/business/audit/util/AuditDtoHelper.class,
					           it/${product.dir}/${project}/integration/audit/dao/**,
				           	   it/${product.dir}/${project}/integration/audit/vo/**,
					           it/${product.dir}/${project}/dto/engine/audit/OperazioneAudit.class">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/audit/vo/AuditVO.hbm.xml"/>
		</jar>
	</target>

	<!-- target per creare il jar del client del business del backoffice per l'utilizzo del Framework CSI -->
	<target name="ejbinterface-backoffice"
	        description="Esclude le interfacce degli EJB dei servizi pubblicati">
		<echo message="Interfacce dell'EJB escluse." />

		<jar jarfile="${project.dir.build.archives}/ecmengine-backoffice-client-${client.version}.jar"
		     manifest="${project.dir.conf}/jar/ecmengine-backoffice-client/META-INF/MANIFEST.MF"
		     basedir="${project.dir.build.classes}"
             includes="it/${product.dir}/${project}/interfacecsi/backoffice/**,
                       it/${product.dir}/${project}/util/**,
                       it/${product.dir}/${project}/client/backoffice/**,
                       it/${product.dir}/${project}/dto/backoffice/**,
                       it/${product.dir}/${project}/business/publishing/backoffice/EcmEngineBackoffice.class,
                       it/${product.dir}/${project}/business/publishing/backoffice/EcmEngineBackofficeHome.class,
                       it/${product.dir}/${project}/business/publishing/backoffice/EcmEngineBackofficeBusinessInterface.class,
                       it/${product.dir}/${project}/business/publishing/util/EcmEngineContentModelConstants.class"
			excludes="${exclude_security}
                      "
                    >
			<zipfileset dir="${project.dir.build.tmp}/client">
				<include name="client.properties"/>
			</zipfileset>
		</jar>
	</target>

	<!-- target per creare il jar del client del business del backoffice per l'utilizzo del Framework CSI -->
	<target name="ejbinterface-management"
	        description="Esclude le interfacce degli ejb dei servizi pubblicati">
		<echo message="interfacce dell'ejb escluse." />

		<jar jarfile="${project.dir.build.archives}/ecmengine-engine-client-${client.version}.jar"
		     manifest="${project.dir.conf}/jar/ecmengine-engine-client/META-INF/MANIFEST.MF"
		     basedir="${project.dir.build.classes}"
             includes="it/${product.dir}/${project}/interfacecsi/management/**,
                       it/${product.dir}/${project}/interfacecsi/search/**,
                       it/${product.dir}/${project}/interfacecsi/security/**,
                       it/${product.dir}/${project}/interfacecsi/massive/**,
                       it/${product.dir}/${project}/dto/engine/**,
                       it/${product.dir}/${project}/client/engine/**,
                       it/${product.dir}/${project}/util/**,
                       it/${product.dir}/${project}/business/publishing/management/EcmEngineManagement.class,
                       it/${product.dir}/${project}/business/publishing/management/EcmEngineManagementHome.class,
                       it/${product.dir}/${project}/business/publishing/management/EcmEngineManagementBusinessInterface.class,
                       it/${product.dir}/${project}/business/publishing/massive/EcmEngineMassive.class,
                       it/${product.dir}/${project}/business/publishing/massive/EcmEngineMassiveHome.class,
                       it/${product.dir}/${project}/business/publishing/massive/EcmEngineMassiveBusinessInterface.class,
                       it/${product.dir}/${project}/business/publishing/search/EcmEngineSearch.class,
                       it/${product.dir}/${project}/business/publishing/search/EcmEngineSearchHome.class,
                       it/${product.dir}/${project}/business/publishing/search/EcmEngineSearchBusinessInterface.class,
                       it/${product.dir}/${project}/business/publishing/security/EcmEngineSecurity.class,
                       it/${product.dir}/${project}/business/publishing/security/EcmEngineSecurityHome.class,
                       it/${product.dir}/${project}/business/publishing/security/EcmEngineSecurityBusinessInterface.class"
             excludes="${exclude_security}
                      "
                       >
			<zipfileset dir="${project.dir.build.tmp}/client">
				<include name="client.properties"/>
			</zipfileset>
		</jar>
	</target>

	<!-- Parte dedicata alla compilazione e alla creazione del pacchetto di rilascio dei test junit ONLINE -->
	<target name="compile-test" depends="init-target,compile-all">
		<javac srcdir="${project.dir.src.test.java}"
			excludes="it/${product.dir}/${project}/test/webservices/**"
			destdir="${project.dir.build.classes}"
			classpath="${classpath_test}"
			debug="true"
			optimize="true"
            compiler="modern"
            fork="yes"
			executable="${env.JAVA_HOME_SERVER}/bin/javac"/>
	</target>

	<target name="compile-test-properties">
		<available file="${compile.local.name}" type="file" property="local.properties.present" />
		<fail unless="local.properties.present" message="Could not find ${compile.local.name}, please copy it to buildfiles directory" />
		<loadproperties srcfile="${compile.local.name}" />
		<echo message="Load Properties ${compile.local.name}" />
		<echo message="URL to Connect  ${url_to_connect}" />

		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${target.cluster.partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${target.cluster.partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${target.cluster.partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cluster_partition@@" value="${target.cluster.partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cluster_partition@@" value="${target.cluster.partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<copy file="${project.dir.conf}/test/ecmengine-backoffice-delegate.properties"
			tofile="${project.dir.build.test}/ecmengine-backoffice-delegate.properties"
            overwrite="true" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@caller@@" value="${caller}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@backofficeDelegateClass@@" value="${backofficeDelegateClass}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@disable_discovery@@" value="${disable_discovery}" />

		<copy file="${project.dir.conf}/test/ecmengine-engine-delegate.properties"
			tofile="${project.dir.build.test}/ecmengine-engine-delegate.properties"
            overwrite="true" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@caller@@" value="${caller}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@delegateClass@@" value="${delegateClass}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@disable_discovery@@" value="${disable_discovery}" />


		<copy file="${project.dir.conf}/test/log4j.properties" tofile="${project.dir.build.test}/log4j.properties" overwrite="true"/>
		<replace file="${project.dir.build.test}/log4j.properties" token="@@path_log@@" value="${path_log}" />

		<mkdir dir="${project.dir.build.classes}" />
		<mkdir dir="${project.dir.build.archives}" />

		<jar jarfile="${project.dir.build.archives}/${test_package_name}${junit.ejb.extension}-${server.version}.jar"
		 basedir="${project.dir.build.classes}"
         includes="it/${product.dir}/${project}/test/**">
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginemanagement.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginesearch.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginebackoffice.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginesecurity.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginemassive.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="ecmengine-backoffice-delegate.properties"/>
			<zipfileset dir="${project.dir.build.test}" includes="ecmengine-engine-delegate.properties"/>
		</jar>

	</target>

	<target name="batch-compile-test-properties">
		<available file="${compile.local.name}" type="file" property="local.properties.present" />
		<fail unless="local.properties.present" message="Could not find ${compile.local.name}, please copy it to buildfiles directory" />
		<loadproperties srcfile="${compile.local.name}" />
		<echo message="Load Properties ${compile.local.name}" />
		<echo message="URL to Connect  ${url_to_connect}" />

		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@disable_discovery@@" value="${disable_discovery}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<copy file="${project.dir.conf}/test/ecmengine-backoffice-delegate.properties"
			tofile="${project.dir.build.test}/ecmengine-backoffice-delegate.properties"
            overwrite="true" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@caller@@" value="${caller}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@backofficeDelegateClass@@" value="${backofficeDelegateClass}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/ecmengine-backoffice-delegate.properties" token="@@disable_discovery@@" value="${disable_discovery}" />

		<copy file="${project.dir.conf}/test/ecmengine-engine-delegate.properties"
			tofile="${project.dir.build.test}/ecmengine-engine-delegate.properties"
            overwrite="true" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@caller@@" value="${caller}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@delegateClass@@" value="${delegateClass}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@url_to_connect@@" value="${url_to_connect}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@cluster_partition@@" value="${cluster_partition}" />
		<replace file="${project.dir.build.test}/ecmengine-engine-delegate.properties" token="@@disable_discovery@@" value="${disable_discovery}" />


		<copy file="${project.dir.conf}/test/log4j.properties" tofile="${project.dir.build.test}/log4j.properties" overwrite="true"/>
		<replace file="${project.dir.build.test}/log4j.properties" token="@@path_log@@" value="${path_log}" />

		<mkdir dir="${project.dir.build.archives}" />

		<jar jarfile="${project.dir.build.archives}/${test_package_name}${junit.ejb.extension}-${server.version}.jar"
		 basedir="${project.dir.build.classes}"
         includes="it/${product.dir}/${project}/test/**">
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginemanagement.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginesearch.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginebackoffice.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginesecurity.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="pd_ecmenginemassive.xml"/>
			<zipfileset dir="${project.dir.build.test}" includes="ecmengine-backoffice-delegate.properties"/>
			<zipfileset dir="${project.dir.build.test}" includes="ecmengine-engine-delegate.properties"/>
		</jar>

	</target>

	<target name="test-cooptrace-true">
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cooptrace_begin@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cooptrace_begin@@" value="" />

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cooptrace_end@@" value="" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cooptrace_end@@" value="" />
	</target>

	<target name="test-cooptrace-false">
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cooptrace_begin@@" value="&lt;!-- Cooptrace disabilitato" />

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cooptrace_end@@" value="--&gt;" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cooptrace_end@@" value="--&gt;" />
	</target>

	<target name="package-unit-test" depends="compile-test"
          description="Packages the ${test_package_name}-${server.version}.jar component file">

		<echo message="Packaging ${test_package_name}-${server.version}.jar file ..." />
		<echo message="Target ${target}" />

		<!-- at20070806 controllo in quale environment devo installare il pacchetto dei test unitari -->

		<condition property="target.csi.operating.system.environment"
		           value="executor-windows-environment"
		           else="executor-linux-environment">
			<equals arg1="${operating_system}" arg2="windows"/>
		</condition>

		<echo message="Aggiunta del file di lancio dei test unitari"/>
		<echo message="Target richiamato ${target.csi.operating.system.environment}."/>
		<antcall target="package-unit-test-${target.build.ear}" />
	</target>

	<target name="package-unit-test-single-instance">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />
    	<property name="compile.local.name" value="buildfiles/local${target.ejb.extension}.properties"/>
    	<property name="junit.ejb.extension" value="${target.ejb.extension}"/>

		<antcall target="compile-test-properties"/>
		<antcall target="all-client-jar-single-instance"/>
		<loadproperties srcfile="${compile.local.name}" />
		<loadproperties srcfile="${compile.local.name}" />
		<antcall target="executor-${operating_system}-environment" />
	</target>
	<target name="package-unit-test-online">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />
    	<property name="compile.local.name" value="buildfiles/local${target.ejb.extension}.properties"/>
    	<property name="junit.ejb.extension" value="${target.ejb.extension}"/>

		<antcall target="compile-test-properties"/>
		<antcall target="all-client-jar-online"/>
		<loadproperties srcfile="${compile.local.name}" />
		<loadproperties srcfile="${compile.local.name}" />
		<antcall target="executor-${operating_system}-environment" />
	</target>
	<target name="package-unit-test-batch">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${batch.target.enable.cooptrace}" />
		<property name="compile.local.name" value="buildfiles/local${batch.target.ejb.extension}.properties"/>
    	<property name="junit.ejb.extension" value="${batch.target.ejb.extension}"/>
		<antcall target="batch-compile-test-properties"/>
		<antcall target="all-client-jar-batch"/>
		<loadproperties srcfile="${compile.local.name}" />
		<antcall target="executor-${operating_system}-environment" />
	</target>
	<target name="package-unit-test-both">
		<antcall target="package-unit-test-online"/>
		<antcall target="clean-test" />
		<antcall target="package-unit-test-batch"/>
	</target>

	<!-- target per inserire il file .bat sul pacchetto dei test unitari -->
	<target name="executor-windows-environment"
	        description="Inserisce il file .bat nel pacchetto dei test unitari">
		<echo message="runJunit.bat" />

		<!-- at20070806 controllo se sto usando CSI Framework per i test unitari (ambiente windows) -->
		<condition property="target.csi.framework.windows.test.unitari"
			           value="executor-windows-csi-framework-environment"
			           else="executor-windows-no-csi-framework-environment">
			<equals arg1="${target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione del pacchetto per i test unitari csi framework (anbiente windows)"/>
		<echo message="target richiamato ${target.csi.framework.windows.test.unitari}"/>
		<antcall target="${target.csi.framework.windows.test.unitari}" />
	</target>

	<!-- target per inserire il file .sh sul pacchetto dei test unitari -->
	<target name="executor-linux-environment"
	        description="Inserisce il file .sh nel pacchetto dei test unitari">
		<echo message="runJunit.sh" />

		<!-- at20070806 controllo se sto usando CSI Framework per i test unitari (ambiente linux) -->
		<condition property="target.csi.framework.linux.test.unitari"
			           value="executor-linux-csi-framework-environment"
			           else="executor-linux-no-csi-framework-environment">
			<equals arg1="${target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione del pacchetto per i test unitari csi framework (anbiente linux)"/>
		<echo message="target richiamato ${target.csi.framework.linux.test.unitari}"/>
		<antcall target="${target.csi.framework.linux.test.unitari}" />

	</target>

	<!-- target la creazione del pacchetto dei test unitari windows con csi framework -->
	<target name="executor-windows-csi-framework-environment"
	        description="creazione del pacchetto per windows con csi framework">
		<echo message="runJunit.bat" />

		<copy file="${project.dir.conf}/test/runJunit.bat" tofile="${project.dir.build.test}/runJunit.bat"/>
		<copy file="${project.dir.conf}/test/junit.properties" tofile="${project.dir.build.test}/junit.properties"/>
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@path_jdk_executor_test@@" value="${path_jdk_executor_test}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@class_path_csi_infrastructure@@" value="csi-ejb-1.4.5.jar;csi-rmi-1.4.5.jar;csi-stadapter-1.4.5.jar;csi-tools-1.4.5.jar;csi-core-1.4.5.jar;" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@jboss.client.version@@" value="${jboss.version}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@server.version@@" value="${server.version}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@client.version@@" value="${client.version}" />
		<replace file="${project.dir.build.test}/junit.properties" token="@@test.target@@" value="${test.target}" />

		<condition property="test.include.cooptrace" value="true">
			<equals arg1="${target.use.cooptrace}" arg2="true"/>
		</condition>

		<zip destfile="${project.dir.dist.target}/${test_package_name}${junit.ejb.extension}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}" includes="${test_package_name}${junit.ejb.extension}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="csi-ejb-1.4.5.jar,
					csi-rmi-1.4.5.jar,
					csi-stadapter-1.4.5.jar,
					csi-tools-1.4.5.jar,
					csi-core-1.4.5.jar,
					junit-3.8.1.jar,
					log4j-1.2.15.jar,
					util-perf-1.0.1.jar,
					jbossall-client-${jboss.version}.jar,
					commons-logging-1.0.4.jar" />
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine${junit.ejb.extension}-backoffice-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-engine-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-common-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}" includes="runJunit.bat" />
			<zipfileset dir="${project.dir.build.test}" includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.build.test}" includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-model.xml" />
			<zipfileset dir="${project.dir.lib}">
				<include name="coop-trace-*.jar" if="test.include.cooptrace" />
				<!-- <include name="commons-logging-1.0.4.jar" if="test.include.cooptrace" /> -->
				<include name="commons-logging-api-1.0.4.jar" if="test.include.cooptrace" />
			</zipfileset>
		</zip>
	</target>

	<!-- target la creazione del pacchetto dei test unitari windows senza csi framework -->
    <!-- MB: verificare il correto funzionamento -->
	<target name="executor-windows-no-csi-framework-environment"
	        description="creazione del pacchetto per windows senza csi framework">
		<echo message="runJunit.bat" />

		<copy file="${project.dir.conf}/test/runJunit.bat" tofile="${project.dir.build.test}/runJunit.bat"/>
		<copy file="${project.dir.conf}/test/junit.properties" tofile="${project.dir.build.test}/junit.properties"/>
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@path_jdk_executor_test@@" value="${path_jdk_executor_test}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@class_path_csi_infrastructure@@" value="csi-stadapter-1.4.5.jar;" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@jboss.client.version@@" value="${jboss.version}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@server.version@@" value="${server.version}" />
		<replace file="${project.dir.build.test}/runJunit.bat" token="@@client.version@@" value="${client.version}" />
		<replace file="${project.dir.build.test}/junit.properties" token="@@test.target@@" value="${test.target}" />

		<zip destfile="${project.dir.dist.target}/${test_package_name}${junit.ejb.extension}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}"	includes="${test_package_name}${junit.ejb.extension}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="csi-stadapter-1.4.5.jar,
					junit-3.8.1.jar,
					log4j-1.2.15.jar,
					util-perf-1.0.1.jar,
					jbossall-client-${jboss.version}.jar,
					commons-logging-1.0.4.jar" />
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine${junit.ejb.extension}-backoffice-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-engine-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-common-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}" includes="runJunit.bat" />
			<zipfileset dir="${project.dir.build.test}" includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.build.test}" includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-model.xml" />
		</zip>
	</target>

	<!-- target la creazione del pacchetto dei test unitari linux con csi framework -->
	<target name="executor-linux-csi-framework-environment"
	        description="creazione del pacchetto per linux con csi framework">
		<echo message="runJunit.sh" />

		<condition property="test.include.cooptrace" value="true">
			<equals arg1="${target.use.cooptrace}" arg2="true"/>
		</condition>

		<copy file="${project.dir.conf}/test/runJunit.sh" tofile="${project.dir.build.test}/runJunit.sh"/>
		<copy file="${project.dir.conf}/test/junit.properties" tofile="${project.dir.build.test}/junit.properties"/>
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@class_path_csi_infrastructure@@" value="csi-ejb-1.4.5.jar:csi-rmi-1.4.5.jar:csi-stadapter-1.4.5.jar:csi-tools-1.4.5.jar:csi-core-1.4.5.jar:" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@jboss.client.version@@" value="${jboss.version}" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@server.version@@" value="${server.version}" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@client.version@@" value="${client.version}" />
		<replace file="${project.dir.build.test}/junit.properties" token="@@test.target@@" value="${test.target}" />

		<zip destfile="${project.dir.dist.target}/${test_package_name}${junit.ejb.extension}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}" includes="${test_package_name}${junit.ejb.extension}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="csi-ejb-1.4.5.jar,
					csi-rmi-1.4.5.jar,
					csi-stadapter-1.4.5.jar,
					csi-tools-1.4.5.jar,
					csi-core-1.4.5.jar,
					junit-3.8.1.jar,
					log4j-1.2.15.jar,
					util-perf-1.0.1.jar,
					jbossall-client-${jboss.version}.jar,
					commons-logging-1.0.4.jar" />
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine${junit.ejb.extension}-backoffice-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-engine-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-common-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}" includes="runJunit.sh" />
			<zipfileset dir="${project.dir.build.test}" includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.build.test}" includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-model.xml" />

			<zipfileset dir="${project.dir.lib}">
				<include name="coop-trace-*.jar" if="test.include.cooptrace" />
				<include name="commons-logging-1.0.4.jar" if="test.include.cooptrace" />
				<include name="commons-logging-api-1.0.4.jar" if="test.include.cooptrace" />
			</zipfileset>
		</zip>
	</target>

	<!-- target la creazione del pacchetto dei test unitari linux senza csi framework -->
	<target name="executor-linux-no-csi-framework-environment"
	        description="creazione del pacchetto per linux senza csi framework">
		<echo message="runJunit.sh" />

		<copy file="${project.dir.conf}/test/runJunit.sh" tofile="${project.dir.build.test}/runJunit.sh"/>
		<copy file="${project.dir.conf}/test/junit.properties" tofile="${project.dir.build.test}/junit.properties"/>
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@class_path_csi_infrastructure@@" value="csi-stadapter-1.4.5.jar:" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@jboss.client.version@@" value="${jboss.version}" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@server.version@@" value="${server.version}" />
		<replace file="${project.dir.build.test}/runJunit.sh" token="@@client.version@@" value="${client.version}" />
		<replace file="${project.dir.build.test}/junit.properties" token="@@test.target@@" value="${test.target}" />

		<zip destfile="${project.dir.dist.target}/${test_package_name}${junit.ejb.extension}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}" includes="${test_package_name}${junit.ejb.extension}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="csi-stadapter-1.4.5.jar,
					junit-3.8.1.jar,
					log4j-1.2.15.jar,
					util-perf-1.0.1.jar,
					jbossall-client-${jboss.version}.jar,
					commons-logging-1.0.4.jar" />
			<zipfileset dir="${project.dir.build.archives}"
				includes="ecmengine${junit.ejb.extension}-backoffice-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-engine-client-${client.version}.jar,
					ecmengine${junit.ejb.extension}-common-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}" includes="runJunit.sh" />
			<zipfileset dir="${project.dir.build.test}" includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test" includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.build.test}" includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test" includes="test-model.xml" />
		</zip>
	</target>

	<!-- parte dedicata alla compilazione e alla creazione del pacchetto di rilascio dei test junit per webservice -->
	<target name="compile-webservices-test" depends="init-target,generate-axis-webservices-client">

		<available file="buildfiles/local_webservices.properties" type="file" property="local_webservices.properties.present" />
		<fail unless="local_webservices.properties.present" message="Could not find local_webservices.properties, please copy it to buildfiles directory" />

		<loadproperties srcfile="buildfiles/local_webservices.properties" />

		<copy file="${project.dir.conf}/test/log4j.properties" tofile="${project.dir.build.test}/log4j.properties"/>
		<replace file="${project.dir.build.test}/log4j.properties" token="@@path_log@@" value="${path_log}" />

		<copy file="${project.dir.conf}/test/ecmengine-webservices.properties" tofile="${project.dir.build.test}/ecmengine-webservices.properties"/>
		<replace file="${project.dir.build.test}/ecmengine-webservices.properties" token="@@management_url@@" value="${management_url}" />
		<replace file="${project.dir.build.test}/ecmengine-webservices.properties" token="@@backoffice_url@@" value="${backoffice_url}" />

		<javac srcdir="${project.dir.src.test.java}"
			destdir="${project.dir.build.classes}"
			classpath="${classpath_test};${axis.classpath};${project.dir.build.tmp.generated}/classes"
			debug="true"
			optimize="true"
            compiler="modern"
            fork="yes"
			executable="${env.JAVA_HOME_SERVER}/bin/javac"/>

	</target>

	<target name="package-webservices-unit-test" depends="compile-webservices-test"
          description="Packages the ${test_webservice_package_name}-${server.version}.jar component file">

		<echo message="Packaging ${test_webservice_package_name}-${server.version}.jar file ..." />
		<echo message="Target ${target}" />

		<mkdir dir="${project.dir.build.archives}" />

		<jar jarfile="${project.dir.build.archives}/${test_webservice_package_name}-${server.version}.jar"
		 basedir="${project.dir.build.classes}"
         includes="it/${product.dir}/${project}/test/**">
			<zipfileset dir="${project.dir.build.test}" includes="ecmengine-webservices.properties" />
		</jar>

		<condition property="target.csi.operating.system.environment"
		           value="executor-webservice-windows-environment"
		           else="executor-webservice-linux-environment">
			<equals arg1="${operating_system}" arg2="windows"/>
		</condition>

		<echo message="Aggiunta del file di lancio dei test unitari"/>
		<echo message="Target richiamato ${target.csi.operating.system.environment}."/>
		<antcall target="${target.csi.operating.system.environment}" />

	</target>

	<!-- target la creazione del pacchetto dei test unitari windows per web service -->
	<target name="executor-webservice-windows-environment"
	        description="creazione del pacchetto per windows per webservice">
		<echo message="runJunit-ws.bat" />

		<copy file="${project.dir.conf}/test/runJunit-ws.bat" tofile="${project.dir.build.test}/runJunit-ws.bat"/>
		<replace file="${project.dir.build.test}/runJunit-ws.bat" token="@@path_jdk_executor_test@@" value="${path_jdk_executor_test}" />
		<replace file="${project.dir.build.test}/runJunit-ws.bat" token="@@class_path_webservice_client@@" value="axis-1.4.jar;jaxrpc-1.1.jar;saaj.jar;wsdl4j-1.5.1.jar;commons-discovery-0.2.jar;saaj-1.2.jar;junit-3.8.1.jar;util-perf-1.0.1.jar;commons-logging-1.0.4.jar;log4j-1.2.8.jar;${project.package.name}-ws-client-${client.version}.jar;${test_webservice_package_name}-${server.version}.jar;" />

		<zip destfile="${project.dir.dist.target}/${test_webservice_package_name}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}"
				includes="${test_webservice_package_name}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="axis-1.4.jar,
				jaxrpc-1.1.jar,
				saaj.jar,
				wsdl4j-1.5.1.jar,
				commons-discovery-0.2.jar,
				saaj-1.2.jar,
				junit-3.8.1.jar,
				util-perf-1.0.1.jar,
				commons-logging-1.0.4.jar,
				log4j-1.2.8.jar" />
			<zipfileset dir="${project.dir.dist.target}" includes="${project.package.name}-ws-client-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}"  includes="runJunit-ws.bat" />
			<zipfileset dir="${project.dir.build.test}"  includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test"   includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test"   includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.conf}/test"   includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test"   includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test"   includes="test-model.xml" />
		</zip>
	</target>

	<!-- target la creazione del pacchetto dei test unitari linux per web service -->
	<target name="executor-webservice-linux-environment"
	        description="creazione del pacchetto per linux per web service">
		<echo message="runJunit-ws.sh" />

		<copy file="${project.dir.conf}/test/runJunit-ws.sh" tofile="${project.dir.build.test}/runJunit-ws.sh"/>
		<replace file="${project.dir.build.test}/runJunit-ws.sh" token="@@class_path_webservice_client@@" value="axis-1.4.jar:jaxrpc-1.1.jar:saaj.jar:wsdl4j-1.5.1.jar:commons-discovery-0.2.jar:saaj-1.2.jar:junit-3.8.1.jar:util-perf-1.0.1.jar:commons-logging-1.0.4.jar:log4j-1.2.8.jar:${project.package.name}-ws-client-${client.version}.jar:${test_webservice_package_name}-${server.version}.jar:" />

		<zip destfile="${project.dir.dist.target}/${test_webservice_package_name}-${server.version}.zip">
			<zipfileset dir="${project.dir.build.archives}" includes="${test_webservice_package_name}-${server.version}.jar" />
			<zipfileset dir="lib"
				includes="axis-1.4.jar,
				jaxrpc-1.1.jar,
				saaj.jar,
				wsdl4j-1.5.1.jar,
				commons-discovery-0.2.jar,
				saaj-1.2.jar,
				junit-3.8.1.jar,
				util-perf-1.0.1.jar,
				commons-logging-1.0.4.jar,
				log4j-1.2.8.jar" />
			<zipfileset dir="${project.dir.dist.target}" includes="${project.package.name}-ws-client-${client.version}.jar" />
			<zipfileset dir="${project.dir.build.test}"  includes="runJunit-ws.sh" />
			<zipfileset dir="${project.dir.build.test}"  includes="log4j.properties" />
			<zipfileset dir="${project.dir.conf}/test"   includes="generic_content.pdf" />
			<zipfileset dir="${project.dir.conf}/test"   includes="generic_security_content.p7m" />
			<zipfileset dir="${project.dir.conf}/test"   includes="junit.properties" />
			<zipfileset dir="${project.dir.conf}/test"   includes="test-archive.zip" />
			<zipfileset dir="${project.dir.conf}/test"   includes="test-model.xml" />
		</zip>
	</target>


	<!-- Creazione pacchetto contenente le porte del framework CSI (i parametri delle porte delegate sono
	     volutamnete lasciati senza replace in quanto sara' il fruitore del servizio che impostera'
	     i valori secondi l'ambiente su cui si vogliono richiamare i servizi
         MB: viene solo fatto il replace di @@ejbextension@@ perche' e' relativo alla partizione online/batch scelta
    -->
	<!-- Target per la crazione dei client da distribuire ai fruitor dei serivi dell'ECMENGINE-->
	<target name="package-porte-csi" description="creazione del pacchetto per la distribuzione delle porte delegate">
        <antcall target="package-porte-csi-${target.build.ear}" />
	</target>
	<target name="package-porte-csi-single-instance">
		<antcall target="package-porte-csi-online"/>
	</target>

	<target name="package-porte-csi-online" description="creazione del pacchetto per la distribuzione delle porte delegate">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />

		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

        <replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />

		<zip destfile="${project.dir.dist.target}/${porte.csi.infrastructure}-${server.version}${target.ejb.extension}.zip">
			<zipfileset dir="${project.dir.build.test}" includes="pd_*.xml" />
		</zip>

		<zip destfile="${project.dir.dist.target}/${porte.csi.infrastructure}-${server.version}${target.ejb.extension}.zip" update="yes">
			<zipfileset dir="${project.dir.conf}/client/" includes="pd_*soap.xml" />
		</zip>
	</target>
	<target name="package-porte-csi-batch" description="creazione del pacchetto per la distribuzione delle porte delegate batch">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${batch.target.enable.cooptrace}" />
		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

        <replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />
        <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />

		<zip destfile="${project.dir.dist.target}/${porte.csi.infrastructure}-${server.version}${batch.target.ejb.extension}.zip">
			<zipfileset dir="${project.dir.build.test}" includes="pd_*.xml" />
		</zip>
		<zip destfile="${project.dir.dist.target}/${porte.csi.infrastructure}-${server.version}${batch.target.ejb.extension}.zip" update="yes">
			<zipfileset dir="${project.dir.conf}/client/" includes="pd_*soap.xml" />
		</zip>
	</target>
	<target name="package-porte-csi-both">
		<antcall target="package-porte-csi-online"/>
		<antcall target="package-porte-csi-batch"/>
	</target>

	<!-- Target fittizio per non generare il pacchetto delle porte di CSI Framework -->
	<target name="package-no-porte-csi"
		description="target vuoto per la non generazione del pacchetto delle porte CSI Framework">
	</target>

	<target name="default" description="Verifica se eseguire il build per un solo environment specificato a linea di commando con -Dtarget=${target} o per tutti gli environment ">
	    <condition property="first-call" value="distribution">
	      <not>
	        <equals arg1="${target}" arg2="$${target}" />
	      </not>
	    </condition>
	    <condition property="first-call" value="all-target">
	      <equals arg1="${target}" arg2="$${target}" />
	    </condition>
	    <echo message="target: ${target}" />
	    <echo message="first-call: ${first-call}" />
	    <antcall target="${first-call}"/>
	</target>

	<target name="no-axis" description="Target fittizio invocato se non viene incluso il modulo axis">
		<echo message="axis web service: escluso." />
	</target>

	<target name="no-pabr" description="Target fittizio invocato se non viene incluso il bridge soap della pa">
		<echo message="ecmengine_pabr: escluso." />

		<!-- Clear web module in application.xml -->
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@pabr_module@@"
		         value="" />
	</target>

	<target name="init-axis" description="Inizializza il contesto per i task di Axis">
		<property name="axis.classpath" value="lib/axis-1.4.jar;lib/axis-ant-1.4.jar;lib/jaxrpc-1.1.jar;lib/saaj.jar;lib/wsdl4j-1.5.1.jar;lib/csi-core-1.4.5.jar;lib/csi-ejb-1.4.5.jar;lib/csi-rmi-1.4.5.jar;lib/csi-stadapter-1.4.5.jar;lib/log4j-1.2.8.jar;lib/commons-logging-1.0.4.jar;lib/commons-discovery-0.2.jar;lib/saaj-1.2.jar;lib/activation-1.0.2.jar;lib/mail-1.3.2.jar"/>
		<taskdef name="axis-java2wsdl" classname="org.apache.axis.tools.ant.wsdl.Java2WsdlAntTask" classpath="${axis.classpath}" />
		<taskdef name="axis-wsdl2java" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask" classpath="${axis.classpath}" />
	</target>

	<target name="generate-axis-webservices" depends="init-axis,init-target,compile-all" description="Generazione dei web services basati su Axis">
        <antcall target="generate-axis-webservices-${target.build.ear}" />
	</target>

	<target name="generate-axis-webservices-single-instance">
		<antcall target="generate-axis-webservices-online"/>
	</target>
	<target name="generate-axis-webservices-online" depends="init-axis">
		<antcall target="axis-webservices-online"/>
	</target>
	<target name="generate-axis-webservices-batch" depends="init-axis">
		<antcall target="axis-webservices-batch"/>
	</target>
	<target name="generate-axis-webservices-both">
		<antcall target="generate-axis-webservices-online"/>
		<antcall target="generate-axis-webservices-batch"/>
	</target>

    <!-- AXIS versione online -->
	<target name="axis-webservices-online">
		<echo message="generazione web service..." />

		<fail unless="URL_TO_CONNECT" message="URL_TO_CONNECT sconosciuto"/>

		<antcall target="all-client-jar-online"/>

		<!-- Generate management WSDL -->
		<mkdir dir="${project.dir.build.tmp.generated}/wsdl"/>
		<axis-java2wsdl
			classname="it.doqui.index.ecmengine.client.webservices.engine.EcmEngineWebServiceDelegate"
			classpath="${project.dir.build.classes};${axis.classpath}"
			output="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl"
			style="RPC"
			location="http://localhost:8080/ecmengine/services/EcmEngineManagement"
			namespace="urn:EcmEngineManagement">
			<mapping
				namespace="urn:EcmEngineManagement"
				package="it.doqui.index.ecmengine.client.webservices.engine"
			/>
		</axis-java2wsdl>

		<!-- Generate backoffice WSDL -->
		<axis-java2wsdl
			classname="it.doqui.index.ecmengine.client.webservices.backoffice.EcmEngineWebServiceBackofficeDelegate"
			classpath="${project.dir.build.classes};${axis.classpath}"
			output="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl"
			style="RPC"
			location="http://localhost:8080/${project.package.name}/services/EcmEngineBackoffice"
			namespace="urn:EcmEngineBackoffice">
			<mapping
				namespace="urn:EcmEngineBackoffice"
				package="it.doqui.index.ecmengine.client.webservices.backoffice"
			/>
		</axis-java2wsdl>

		<!-- Generate management classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/src"/>
		<axis-wsdl2java
			url="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl"
  	        output="${project.dir.build.tmp.generated}/src"
			serverside="true"
			implementationclassname="it.doqui.index.ecmengine.client.webservices.engine.EcmEngineWebServiceDelegateImpl">
			<mapping
				namespace="urn:EcmEngineManagement"
				package="it.doqui.index.ecmengine.client.webservices.engine"
			/>
		</axis-wsdl2java>

		<!-- Generate backoffice classes -->
		<axis-wsdl2java
			url="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl"
			output="${project.dir.build.tmp.generated}/src"
			serverside="true"
			implementationclassname="it.doqui.index.ecmengine.client.webservices.backoffice.EcmEngineWebServiceBackofficeDelegateImpl">
			<mapping
				namespace="urn:EcmEngineBackoffice"
				package="it.doqui.index.ecmengine.client.webservices.backoffice"
			/>
		</axis-wsdl2java>

		<!-- Compile generated classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/classes"/>
		<javac
			srcdir="${project.dir.build.tmp.generated}/src"
			destdir="${project.dir.build.tmp.generated}/classes"
			classpath="${axis.classpath}"
			debug="true"
		/>

		<!-- Merge wsdd files-->
		<mkdir dir="${project.dir.build.tmp.generated}/conf"/>
		<xslt
			in="${project.dir.build.tmp.generated}/src/it/doqui/index/ecmengine/client/webservices/backoffice/deploy.wsdd"
			style="${project.dir.conf.web}/ecmengine/merge-wsdd.xsl"
			out="${project.dir.build.tmp.generated}/conf/server-config.wsdd">
			<param name="source2" expression="${project.dir.build.tmp.generated}/src/it/doqui/index/ecmengine/client/webservices/engine/deploy.wsdd" />
		</xslt>

		<!-- Prepare configuration files -->
        <!--
            MB: per ora non usiamo le PD con cooptrace
		<antcall target="pd-cooptrace-${target.use.cooptrace}"/>
        -->
		<antcall target="pd-cooptrace-false"/>

		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />

		<copy file="${project.dir.conf.web}/ecmengine/ecmengine-backoffice-delegate.properties"
			tofile="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties"/>
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@caller@@" value="${CALLER}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@backofficeDelegateClass@@" value="${BACKOFFICE_DELEGATE_CLASS}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />

		<copy file="${project.dir.conf.web}/ecmengine/ecmengine-engine-delegate.properties"
			tofile="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties"/>
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@caller@@" value="${CALLER}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@delegateClass@@" value="${DELEGATE_CLASS}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />

		<!-- Create jars -->
		<jar destfile="${project.dir.build.archives}/${project.package.name}-ws.jar">
			<zipfileset dir="${project.dir.build.tmp.generated}/classes">
				<include name="**/*"/>
				<exclude name="it/doqui/index/ecmengine/client/webservices/engine/EcmEngineWebServiceDelegateImpl.class"/>
				<exclude name="it/doqui/index/ecmengine/client/webservices/backoffice/EcmEngineWebServiceBackofficeDelegateImpl.class"/>
			</zipfileset>
			<zipfileset dir="${project.dir.build.classes}">
				<include name="it/doqui/index/ecmengine/client/webservices/AbstractWebServiceDelegateBase.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/engine/EcmEngineWebServiceDelegateImpl.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/backoffice/EcmEngineWebServiceBackofficeDelegateImpl.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/util/EcmEngineWebServiceConstants.class"/>
			</zipfileset>
			<zipfileset dir="${project.dir.build.tmp.generated}/conf">
				<include name="ecmengine-backoffice-delegate.properties"/>
				<include name="ecmengine-engine-delegate.properties"/>
			</zipfileset>
		</jar>

        <!-- Gestione del root log category -->
        <copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/ecmenginelog.properties"/>
        <replace file="${project.dir.build.tmp}/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

	    <!-- Create war -->
		<war destfile="${project.dir.build.archives}/${project.package.name}ws${target.ejb.extension}.war" webxml="${project.dir.src.web}/ecmengine/WEB-INF/web.xml">
			<zipfileset dir="lib" prefix="WEB-INF/lib">
				<include name="axis-1.4.jar" />
				<include name="commons-discovery-0.2.jar" />
				<!-- include name="commons-logging-1.0.3.jar" / -->
				<include name="axis-jaxrpc-1.4.jar" />
				<!-- include name="jaxrpc-1.1.jar" / -->
				<!-- include name="jbossall-client-4.0.5.jar" / -->
				<!-- include name="jbossall-client-${jboss.version}.jar" / -->
				<!-- include name="log4j-1.2.5.jar" / -->
				<include name="saaj-1.2.jar" />
				<include name="wsdl4j-1.5.1.jar" />
				<include name="csi-core-1.4.5.jar" />
				<include name="csi-ejb-1.4.5.jar" />
				<include name="csi-rmi-1.4.5.jar" />
				<include name="csi-stadapter-1.4.5.jar" />
				<include name="csi-tools-1.4.5.jar" />
				<include name="util-perf-1.0.1.jar" />
				<include name="activation-1.0.2.jar" />
				<include name="mail-1.3.2.jar" />
				<include name="spring-2.0.2.jar" />
			</zipfileset>
			<zipfileset dir="${project.dir.build.archives}" prefix="WEB-INF/lib">
				<include name="ecmengine-backoffice-client-${client.version}.jar"/>
				<include name="ecmengine-engine-client-${client.version}.jar"/>
				<include name="ecmengine-common-${client.version}.jar"/>
                <!--
				<include name="publishing-beans.jar"/>
				<include name="security.jar"/>
				<include name="massive.jar"/>
                -->
			</zipfileset>
			<zipfileset file="${project.dir.build.archives}/${project.package.name}-ws.jar" prefix="WEB-INF/lib" />
			<zipfileset file="${project.dir.build.tmp.generated}/conf/server-config.wsdd" prefix="WEB-INF" />
			<zipfileset file="${project.dir.src.web}/ecmengine/WEB-INF/jboss-web.xml" prefix="WEB-INF" />
            <zipfileset file="${project.dir.build.tmp}/ecmenginelog.properties" />
		</war>

		<mkdir dir="${project.dir.build}/ws/META-INF"/>
		<copy file="${project.dir.conf}/web/ws/META-INF/application.xml" tofile="${project.dir.build}/ws/META-INF/application.xml" overwrite="true"/>
		<replace file="${project.dir.build}/ws/META-INF/application.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />
		<condition property="ws.linea.cliente" value="" else="-${target.context}">
			<equals arg1="${target.context}" arg2="" />
		</condition>

		<replace file="${project.dir.build}/ws/META-INF/application.xml" token="@@lineacliente@@" value="${ws.linea.cliente}" />

		<ear destfile="${project.dir.build.archives}/${project.package.name}ws${target.ejb.extension}.ear" appxml="${project.dir.build}/ws/META-INF/application.xml" manifest="${project.dir.conf}/web/ws/META-INF/MANIFEST.MF">
			<zipfileset file="${project.dir.build.archives}/${project.package.name}ws${target.ejb.extension}.war"/>
		</ear>

        <tar destfile="${project.dir.dist.target}/${project.package.name}ws${target.ejb.extension}-${server.version}.tar">
            <tarfileset dir="${project.dir.build.archives}">
                <include name="${project.package.name}ws${target.ejb.extension}.ear"/>
            </tarfileset>
        </tar>

		<!-- Update WSDL files -->
		<copy file="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl" todir="${project.dir.src.web}/ecmengine" overwrite="true" />
		<copy file="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl" todir="${project.dir.src.web}/ecmengine" overwrite="true" />
	</target>

    <!-- AXIS versione batch
         MB: da rivedere, per ora e' duplicata la parte non batch, ma occorre trovare una corretta nomenclatura per la parte batch dei WS
    -->
	<target name="axis-webservices-batch">
		<echo message="generazione web service..." />

		<fail unless="URL_TO_CONNECT" message="URL_TO_CONNECT sconosciuto"/>

		<antcall target="all-client-jar-batch"/>

		<!-- Generate management WSDL -->
		<mkdir dir="${project.dir.build.tmp.generated}/wsdl"/>
		<axis-java2wsdl
			classname="it.doqui.index.ecmengine.client.webservices.engine.EcmEngineWebServiceDelegate"
			classpath="${project.dir.build.classes};${axis.classpath}"
			output="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl"
			style="RPC"
			location="http://localhost:8080/ecmengine/services/EcmEngineManagement"
			namespace="urn:EcmEngineManagement">
			<mapping
				namespace="urn:EcmEngineManagement"
				package="it.doqui.index.ecmengine.client.webservices.engine"
			/>
		</axis-java2wsdl>

		<!-- Generate backoffice WSDL -->
		<axis-java2wsdl
			classname="it.doqui.index.ecmengine.client.webservices.backoffice.EcmEngineWebServiceBackofficeDelegate"
			classpath="${project.dir.build.classes};${axis.classpath}"
			output="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl"
			style="RPC"
			location="http://localhost:8080/${project.package.name}/services/EcmEngineBackoffice"
			namespace="urn:EcmEngineBackoffice">
			<mapping
				namespace="urn:EcmEngineBackoffice"
				package="it.doqui.index.ecmengine.client.webservices.backoffice"
			/>
		</axis-java2wsdl>

		<!-- Generate management classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/src"/>
		<axis-wsdl2java
			url="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl"
  	        output="${project.dir.build.tmp.generated}/src"
			serverside="true"
			implementationclassname="it.doqui.index.ecmengine.client.webservices.engine.EcmEngineWebServiceDelegateImpl">
			<mapping
				namespace="urn:EcmEngineManagement"
				package="it.doqui.index.ecmengine.client.webservices.engine"
			/>
		</axis-wsdl2java>

		<!-- Generate backoffice classes -->
		<axis-wsdl2java
			url="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl"
			output="${project.dir.build.tmp.generated}/src"
			serverside="true"
			implementationclassname="it.doqui.index.ecmengine.client.webservices.backoffice.EcmEngineWebServiceBackofficeDelegateImpl">
			<mapping
				namespace="urn:EcmEngineBackoffice"
				package="it.doqui.index.ecmengine.client.webservices.backoffice"
			/>
		</axis-wsdl2java>

		<!-- Compile generated classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/classes"/>
		<javac
			srcdir="${project.dir.build.tmp.generated}/src"
			destdir="${project.dir.build.tmp.generated}/classes"
			classpath="${axis.classpath}"
			debug="true"
		/>

		<!-- Merge wsdd files-->
		<mkdir dir="${project.dir.build.tmp.generated}/conf"/>
		<xslt
			in="${project.dir.build.tmp.generated}/src/it/doqui/index/ecmengine/client/webservices/backoffice/deploy.wsdd"
			style="${project.dir.conf.web}/ecmengine/merge-wsdd.xsl"
			out="${project.dir.build.tmp.generated}/conf/server-config.wsdd">
			<param name="source2" expression="${project.dir.build.tmp.generated}/src/it/doqui/index/ecmengine/client/webservices/engine/deploy.wsdd" />
		</xslt>

		<!-- Prepare configuration files -->
        <!--
            MB: per ora non usiamo le PD con cooptrace
		<antcall target="pd-cooptrace-${target.use.cooptrace}"/>
        -->
		<antcall target="pd-cooptrace-false"/>

		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${DISABLE_DISCOVERY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />

		<copy file="${project.dir.conf.web}/ecmengine/ecmengine-backoffice-delegate.properties"
			tofile="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties"/>
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@caller@@" value="${BATCH.CALLER}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@backofficeDelegateClass@@" value="${BATCH.BACKOFFICE_DELEGATE_CLASS}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@url_to_connect@@" value="${BATCH.URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@context_factory@@" value="${BATCH.CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@cluster_partition@@" value="${BATCH.TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-backoffice-delegate.properties" token="@@disable_discovery@@" value="${BATCH.DISABLE_DISCOVERY}" />

		<copy file="${project.dir.conf.web}/ecmengine/ecmengine-engine-delegate.properties"
			tofile="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties"/>
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@caller@@" value="${BATCH.CALLER}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@delegateClass@@" value="${BATCH.DELEGATE_CLASS}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@url_to_connect@@" value="${BATCH.URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@context_factory@@" value="${BATCH.CONTEXT_FACTORY}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@cluster_partition@@" value="${BATCH.TARGET_PARTITION}" />
		<replace file="${project.dir.build.tmp.generated}/conf/ecmengine-engine-delegate.properties" token="@@disable_discovery@@" value="${BATCH.DISABLE_DISCOVERY}" />

		<!-- Create jars -->
		<jar destfile="${project.dir.build.archives}/${project.package.name}${batch.target.ejb.extension}-ws.jar">
			<zipfileset dir="${project.dir.build.tmp.generated}/classes">
				<include name="**/*"/>
				<exclude name="it/doqui/index/ecmengine/client/webservices/engine/EcmEngineWebServiceDelegateImpl.class"/>
				<exclude name="it/doqui/index/ecmengine/client/webservices/backoffice/EcmEngineWebServiceBackofficeDelegateImpl.class"/>
			</zipfileset>
			<zipfileset dir="${project.dir.build.classes}">
				<include name="it/doqui/index/ecmengine/client/webservices/AbstractWebServiceDelegateBase.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/engine/EcmEngineWebServiceDelegateImpl.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/backoffice/EcmEngineWebServiceBackofficeDelegateImpl.class"/>
				<include name="it/doqui/index/ecmengine/client/webservices/util/EcmEngineWebServiceConstants.class"/>
			</zipfileset>
			<zipfileset dir="${project.dir.build.tmp.generated}/conf">
				<include name="ecmengine-backoffice-delegate.properties"/>
				<include name="ecmengine-engine-delegate.properties"/>
			</zipfileset>
		</jar>

        <!-- Gestione del root log category -->
        <copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/ecmenginelog.properties"/>
        <replace file="${project.dir.build.tmp}/ecmenginelog.properties" token="@@root.log.category@@" value="${target.root.log.category}"/>

	    <!-- Create war -->
		<war destfile="${project.dir.build.archives}/${project.package.name}ws${batch.target.ejb.extension}.war" webxml="${project.dir.src.web}/ecmengine/WEB-INF/web.xml">
			<zipfileset dir="lib" prefix="WEB-INF/lib">
				<include name="axis-1.4.jar" />
				<include name="commons-discovery-0.2.jar" />
				<!-- include name="commons-logging-1.0.3.jar" / -->
				<include name="axis-jaxrpc-1.4.jar" />
				<!-- include name="jaxrpc-1.1.jar" / -->
				<!-- include name="jbossall-client-4.0.5.jar" / -->
				<!-- include name="jbossall-client-${jboss.version}.jar" / -->
				<!-- include name="log4j-1.2.5.jar" / -->
				<include name="saaj-1.2.jar" />
				<include name="wsdl4j-1.5.1.jar" />
				<include name="csi-core-1.4.5.jar" />
				<include name="csi-ejb-1.4.5.jar" />
				<include name="csi-rmi-1.4.5.jar" />
				<include name="csi-stadapter-1.4.5.jar" />
				<include name="csi-tools-1.4.5.jar" />
				<include name="util-perf-1.0.1.jar" />
				<include name="activation-1.0.2.jar" />
				<include name="mail-1.3.2.jar" />
				<include name="spring-2.0.2.jar" />
			</zipfileset>
			<zipfileset dir="${project.dir.build.archives}" prefix="WEB-INF/lib">
				<include name="ecmengine${batch.target.ejb.extension}-backoffice-client-${client.version}.jar"/>
				<include name="ecmengine${batch.target.ejb.extension}-engine-client-${client.version}.jar"/>
				<include name="ecmengine${batch.target.ejb.extension}-common-${client.version}.jar"/>
                <!--
				<include name="publishing-beans.jar"/>
				<include name="security.jar"/>
				<include name="massive.jar"/>
                -->
			</zipfileset>
			<zipfileset file="${project.dir.build.archives}/${project.package.name}${batch.target.ejb.extension}-ws.jar" prefix="WEB-INF/lib" />
			<zipfileset file="${project.dir.build.tmp.generated}/conf/server-config.wsdd" prefix="WEB-INF" />
			<zipfileset file="${project.dir.src.web}/ecmengine/WEB-INF/jboss-web.xml" prefix="WEB-INF" />
            <zipfileset file="${project.dir.build.tmp}/ecmenginelog.properties" />
		</war>

		<mkdir dir="${project.dir.build}/ws/META-INF"/>
		<copy file="${project.dir.conf}/web/ws/META-INF/application.xml" tofile="${project.dir.build}/ws/META-INF/application.xml" overwrite="true"/>
		<replace file="${project.dir.build}/ws/META-INF/application.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />
		<condition property="batch.ws.linea.cliente" value="" else="-${target.context}">
			<equals arg1="${target.context}" arg2="" />
		</condition>
		<replace file="${project.dir.build}/ws/META-INF/application.xml" token="@@lineacliente@@" value="${batch.ws.linea.cliente}" />

		<ear destfile="${project.dir.build.archives}/${project.package.name}ws${batch.target.ejb.extension}.ear" appxml="${project.dir.build}/ws/META-INF/application.xml" manifest="${project.dir.conf}/web/ws/META-INF/MANIFEST.MF">
			<zipfileset file="${project.dir.build.archives}/${project.package.name}ws${batch.target.ejb.extension}.war"/>
		</ear>

        <tar destfile="${project.dir.dist.target}/${project.package.name}ws${batch.target.ejb.extension}-${server.version}.tar">
            <tarfileset dir="${project.dir.build.archives}">
                <include name="${project.package.name}ws${batch.target.ejb.extension}.ear"/>
            </tarfileset>
        </tar>

		<!-- Update WSDL files -->
		<copy file="${project.dir.build.tmp.generated}/wsdl/ecmengine-management.wsdl" todir="${project.dir.src.web}/ecmengine" overwrite="true" />
		<copy file="${project.dir.build.tmp.generated}/wsdl/ecmengine-backoffice.wsdl" todir="${project.dir.src.web}/ecmengine" overwrite="true" />
	</target>

	<target name="pd-cooptrace-true">
		<copy file="${project.dir.conf}/client/cooptrace/pd_ecmenginemanagement.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml"/>
		<copy file="${project.dir.conf}/client/cooptrace/pd_ecmenginesearch.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml"/>
		<copy file="${project.dir.conf}/client/cooptrace/pd_ecmenginebackoffice.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml"/>
		<copy file="${project.dir.conf}/client/cooptrace/pd_ecmenginesecurity.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginesecurity.xml"/>
		<copy file="${project.dir.conf}/client/cooptrace/pd_ecmenginemassive.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginemassive.xml"/>
	</target>

	<target name="pd-cooptrace-false">
		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginemanagement.xml"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginesearch.xml"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginebackoffice.xml"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginesecurity.xml"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml" tofile="${project.dir.build.tmp.generated}/conf/pd_ecmenginemassive.xml"/>
	</target>

	<target name="generate-axis-webservices-client" depends="init-target,compile-all,init-axis" description="Generazione dei web services basati su Axis">
		<!-- Generate management classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/src"/>
		<axis-wsdl2java
			url="${project.dir.src.web}/ecmengine/ecmengine-management.wsdl"
			output="${project.dir.build.tmp.generated}/src">
			<mapping
				namespace="urn:EcmEngineManagement"
				package="it.doqui.index.ecmengine.client.webservices.engine"
			/>
		</axis-wsdl2java>

		<!-- Generate backoffice classes -->
		<axis-wsdl2java
			url="${project.dir.src.web}/ecmengine/ecmengine-backoffice.wsdl"
			output="${project.dir.build.tmp.generated}/src">
			<mapping
				namespace="urn:EcmEngineBackoffice"
				package="it.doqui.index.ecmengine.client.webservices.backoffice"
			/>
		</axis-wsdl2java>

		<!-- Compile generated classes -->
		<mkdir dir="${project.dir.build.tmp.generated}/classes" />
		<javac
			srcdir="${project.dir.build.tmp.generated}/src"
			destdir="${project.dir.build.tmp.generated}/classes"
			classpath="${axis.classpath}"
			debug="true" />

		<jar destfile="${project.dir.dist.target}/${project.package.name}-ws-client-${client.version}.jar">
			<zipfileset dir="${project.dir.build.tmp.generated}/classes">
				<include name="**/*" />
			</zipfileset>
		</jar>
	</target>

	<target name="package-pabr" description="Crea la web application per esporre i servizi tramite bridge soap">
		<echo message="ecmengine_pabr: incluso." />

		<!-- Add web module to ear application.xml -->
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@pabr_module@@"
		         value="&lt;module&gt;&lt;web&gt;&lt;web-uri&gt;ecmengine_pabr.war&lt;/web-uri&gt;&lt;context-root&gt;ecmengine_pabr&lt;/context-root&gt;&lt;/web&gt;&lt;/module&gt;" />

		<!-- Prepare configuration files -->
		<mkdir dir="${project.dir.build.tmp}/ecmengine_pabr"/>
		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />

		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />

		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@context_factory@@" value="${CONTEXT_FACTORY}" />

        <!-- MB: doppio .. verificare -->
		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@url_to_connect@@" value="${URL_TO_CONNECT}" />

		<!-- Create war -->
		<war destfile="${project.dir.build.archives}/${project.package.name}_pabr.war" webxml="${project.dir.src.web}/ecmengine_pabr/WEB-INF/web.xml">
			<zipfileset dir="${project.dir.build.tmp}/ecmengine_pabr" prefix="WEB-INF/classes">
                <!-- MB: sbagliato .. manca pa_ ... controllare -->
				<include name="ecmenginemanagement_soap.xml"/>
				<include name="pa_ecmenginebackoffice_soap.xml"/>
				<include name="pa_ecmenginesearch_soap.xml"/>
			</zipfileset>
			<zipfileset dir="lib" prefix="WEB-INF/lib">
				<include name="csi-*.jar"/>
				<include name="util-perf-1.0.1.jar" />
				<include name="soap-2.3.1.jar"/>
				<include name="axis-1.4.jar" />
				<include name="commons-logging-1.0.3.jar" />
				<include name="log4j-1.2.5.jar" />
				<!-- include name="jbossall-client-4.0.5.jar" / -->
				<include name="jbossall-client-${jboss.version}.jar" />
			</zipfileset>
			<zipfileset dir="${project.dir.build.archives}" prefix="WEB-INF/lib">
				<include name="ecmengine-backoffice-client-${client.version}.jar"/>
				<include name="ecmengine-engine-client-${client.version}.jar"/>
				<include name="ecmengine-common-${client.version}.jar"/>
				<include name="publishing-beans.jar"/>
				<include name="security.jar"/>
				<include name="massive.jar"/>
			</zipfileset>
		</war>
	</target>

	<target name="all-target" description="Lancia il build per le varie distribuzioni in sequenza">
	    <antcall target="distribution">
	      <param name="target" value="tst-rp-01"/>
	    </antcall>
	    <antcall target="distribution">
	      <param name="target" value="coll-rp-01"/>
	    </antcall>
	    <antcall target="distribution">
	      <param name="target" value="prod-rp-01"/>
	    </antcall>
	</target>

	<!-- target standard -->
    <!--
    -->
	<target name="compile-all" depends="clean-all,init,load-ivy" description="Compilazione dei file java">
		<javac srcdir="${project.dir.src.java}"
			destdir="${project.dir.build.classes}"
			classpath="${classpath_mtom}"
			excludes="it/${product.dir}/${project}/business/startup/weblogic/**
                      ${exclude_security}
                     "
			debug="on"
			fork="yes"
			executable="${env.JAVA_HOME_SERVER}/bin/javac"/>
	</target>

	<target name="package-all" depends="init-target,compile-all">
		<antcall target="package-ear-${target.build.ear}" />
	</target>

    <!-- EAR solo online con cache -->
	<target name="package-ear-single-instance">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />
		<echo message="*****************************************"/>
		<echo message="Crezione SINGLE INSTANCE EAR             "/>
		<echo message="*****************************************"/>
        <!-- Prerequisiti single instance -->
    	<property name="query.cache" value="true"/>
		<mkdir dir="${project.dir.build.archives}" />
		<mkdir dir="${project.dir.build.archives.included}" />
		<mkdir dir="${project.dir.build.archives.alfresco_extension_external}" />

		<antcall target="package-ear"/>
	</target>

    <!-- EAR online della versione online-batch senza cache -->
	<target name="package-ear-online">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />
		<echo message="*****************************************"/>
		<echo message="Crezione ONLINE EAR                      "/>
		<echo message="*****************************************"/>
        <!-- Prerequisiti online -->
    	<property name="query.cache" value="false"/>
		<mkdir dir="${project.dir.build.archives}" />
		<mkdir dir="${project.dir.build.archives.included}" />
		<mkdir dir="${project.dir.build.archives.alfresco_extension_external}" />

		<antcall target="package-ear"/>
	</target>

    <!-- EAR batch della versione online-batch senza cache -->
	<target name="package-ear-batch">
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${batch.target.enable.cooptrace}" />
		<echo message="*****************************************"/>
		<echo message="Crezione BATCH EAR                       "/>
		<echo message="*****************************************"/>
        <!-- Prerequisiti batch -->
    	<property name="query.cache" value="false"/>
		<mkdir dir="${batch.project.dir.build.archives}" />
		<mkdir dir="${batch.project.dir.build.archives.included}" />
		<mkdir dir="${batch.project.dir.build.archives.alfresco_extension_external}" />
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${batch.target.enable.cooptrace}" />
		<antcall target="batch-package-ear"/>
	</target>

    <!-- EAR online e batch senza cache -->
	<target name="package-ear-both">
        <!-- Crea online -->
		<antcall target="package-ear-online"/>

        <!-- Pulizia -->
		<antcall target="clean-temp"/>
		<antcall target="clean-extension"/>
		<antcall target="clean-registry"/>

        <!-- Crea batch -->
		<antcall target="package-ear-batch"/>
	</target>

	<target name="distribution" depends="package-all" description="Creazione dei pacchetti per la distribuzione">
		<mkdir dir="${project.dir.dist}" />
		<condition property="appserv.is.weblogic" >
			<equals arg1="${target.application.server}" arg2="weblogic" />
		</condition>
		<antcall target="distribution-${target.build.ear}"/>
		<delete>
			<fileset dir="${project.dir.dist.target}" includes="*.zip"/>
		</delete>
	</target>

	<target name="distribution-single-instance" description="Creazione dei pacchetti per la distribuzione">
		<antcall target="distribution-online"/>
	</target>

	<target name="distribution-both" description="Creazione dei pacchetti per la distribuzione">
		<antcall target="distribution-online"/>
		<antcall target="distribution-batch"/>
	</target>

	<target name="distribution-online" description="Creazione dei pacchetti per la distribuzione">
		<condition property="dist.enable.mtom" value="true" else="false">
			<equals arg1="${target.enable.mtom}" arg2="true" />
		</condition>
		<condition property="dist.enable.ws" value="true" else="false">
			<equals arg1="${target.enable.ws}" arg2="true"/>
		</condition>
		<antcall target="distribution-cxf-${dist.enable.mtom}"/>
		<antcall target="distribution-ws-${dist.enable.ws}"/>
		<antcall target="create-registry-package"/>
		<tar destfile="${project.dir.dist.target}/${project.package.name}${target.ejb.extension}-${server.version}.tar">
			<tarfileset dir="${project.dir.build.archives}">
				<include name="${project.package.name}${target.ejb.extension}.ear"/>
			</tarfileset>
			<tarfileset dir="${project.dir.build.archives.alfresco_extension_external}">
	            <!-- In caso di clustered -->
				<include name="node1${target.ejb.extension}.tar" />
				<include name="node2${target.ejb.extension}.tar" />
	            <!-- In caso di non clustered -->
				<include name="${target}.tar" />
				<!-- include name="*.tar" unless="appserv.is.weblogic" / -->
				</tarfileset>
			<tarfileset dir="${project.dir.build.archives}/registry">
				<include name="${project.name}${target.ejb.extension}-registry.zip"/>
			</tarfileset>
			<tarfileset dir="${project.dir.conf}/terracotta">
				<include name="application_tc_config_online.txt" />
			</tarfileset>
		</tar>
	</target>

	<target name="distribution-cxf-true" description="Creazione cxf">
		<tar destfile="${project.dir.dist.target}/${project.package.name}cxf${target.ejb.extension}-${server.version}.tar">
			<tarfileset dir="${project.dir.build.archives}">
				<include name="ecmenginecxf${target.ejb.extension}.ear" if="dist.enable.mtom"/>
			</tarfileset>
		</tar>
	</target>

	<target name="distribution-cxf-false" description="NON Creazione cxf">
	</target>

	<target name="distribution-ws-true" description="Creazione ws">
		<antcall target="init-axis" />
		<antcall target="generate-axis-webservices-online"/>
	</target>

	<target name="distribution-ws-false" description="NON Creazione ws">
	</target>


	<target name="distribution-batch" description="Creazione dei pacchetti per la distribuzione">
		<condition property="batch.dist.enable.mtom" value="true" else="false" >
			<equals arg1="${batch.target.enable.mtom}" arg2="true"/>
		</condition>
		<condition property="batch.dist.enable.ws" value="true" else="false" >
			<equals arg1="${batch.target.enable.ws}" arg2="true"/>
		</condition>
		<antcall target="batch-distribution-cxf-${batch.dist.enable.mtom}"/>
		<antcall target="batch-distribution-ws-${batch.dist.enable.ws}"/>
		<antcall target="create-registry-package"/>
		<tar destfile="${project.dir.dist.target}/${project.package.name}${batch.target.ejb.extension}-${server.version}.tar">
			<tarfileset dir="${project.dir.build.archives}">
				<include name="${project.package.name}${batch.target.ejb.extension}.ear"/>
			</tarfileset>
			<tarfileset dir="${project.dir.build.archives.alfresco_extension_external}">
                <!-- In caso di clustered -->
				<include name="node1${batch.target.ejb.extension}.tar" />
				<include name="node2${batch.target.ejb.extension}.tar" />
                <!-- In caso di non clustered -->
				<include name="${target}.tar" />
				<!-- include name="*.tar" unless="appserv.is.weblogic" / -->
			</tarfileset>
			<tarfileset dir="${project.dir.build.archives}/registry">
				<include name="${project.name}${batch.target.ejb.extension}-registry.zip"/>
			</tarfileset>
			<tarfileset dir="${project.dir.conf}/terracotta">
				<include name="application_tc_config_batch.txt" />
			</tarfileset>
		</tar>
	</target>

	<target name="batch-distribution-cxf-true" description="Creazione cxf batch">
		<tar destfile="${project.dir.dist.target}/${project.package.name}cxf${batch.target.ejb.extension}-${server.version}.tar">
			<tarfileset dir="${project.dir.build.archives}">
				<include name="ecmenginecxf${batch.target.ejb.extension}.ear" if="batch.dist.enable.mtom"/>
			</tarfileset>
		</tar>
	</target>

	<target name="batch-distribution-cxf-false" description="NON Creazione cxf batch">
	</target>

	<target name="batch-distribution-ws-true" description="Creazione ws">
		<antcall target="init-axis" />
		<antcall target="generate-axis-webservices-batch"/>
	</target>

	<target name="batch-distribution-ws-false" description="NON Creazione ws">
	</target>

	<target name="show-vars" depends="init"
		description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************"/>
		<echo message="********  ${project} environment  *******" />
		<echo message="*****************************************"/>
		<echo message=""/>
		<echo message="Classpath :"/>
		<echo message="CLASS_PATH = ${classpath}"/>
		<echo message=""/>
		<echo message="Target:"/>
		<echo message="TARGET = ${target}"/>
		<echo message=""/>
		<echo message="Application :"/>
		<echo message="VERSION = ${server.version}"/>
		<echo message="baseline : ${baseline}"/>
		<echo message=""/>
	</target>

	<target name="about">
		<loadfile property="about" srcFile="buildfiles/about.txt"/>
		<echo message=" ${about}" />
	</target>

	<target name="about-custom">
		<loadfile property="about" srcFile="buildfiles/about.txt"/>
		<echo message=" ${about}" />
	</target>

	<target name="clean-all">
		<antcall target="clean-build"/>
		<!--<antcall target="clean-classes"/>-->
		<antcall target="clean-temp"/>
		<!--antcall target="clean-dist"/-->
		<antcall target="clean-test"/>
		<antcall target="clean-extension"/>
		<antcall target="clean-registry"/>
		<!--antcall target="clean-ivy"/-->
	</target>

	<target name="clean-build" >
		<delete dir="${basedir}/build"/>
	</target>


	<target name="clean-classes" >
		<delete dir="${basedir}/build/classes"/>
	</target>

	<target name="clean-temp" >
		<delete dir="${basedir}/build/temp"/>
	</target>

	<target name="clean-dist" >
		<delete dir="${basedir}/dist"/>
	</target>

	<target name="clean-archives" >
		<delete dir="${basedir}/build/archives"/>
	</target>

	<target name="clean-test" >
		<delete dir="${basedir}/build/test"/>
	</target>

	<target name="clean-extension" >

	</target>

	<target name="clean-registry" >
		<delete dir="${basedir}/build/registry"/>
	</target>

	<target name="clean-ivy" >
		<delete dir="build/cache"/>
		<!-- da scommentare quando tutte lel librerie per la compilazione saranno su repart.csi.it >
		<delete dir="lib"/-->
	</target>

	<target name="create-registry-package" depends="init-target">
		<antcall target="create-registry-package-${target.build.ear}" />
	</target>

	<target name="create-registry-package-single-instance">
		<antcall target="create-registry-package-online" />
	</target>

	<target name="create-registry-package-both">
		<antcall target="create-registry-package-online" />
		<antcall target="clean-temp" />
		<antcall target="clean-registry" />
		<antcall target="create-registry-package-batch" />
	</target>

	<target name="create-registry-package-online">
		<condition property="target.customer_line"
		           value=""
		           else="${target.customer_line}">
			<equals arg1="${target.customer_line}" arg2="${target.customer_line}"/>
		</condition>
		<property name="junit.ejb.extension" value="${target.ejb.extension}"/>
		<var name="target.use.cooptrace" unset="true" />
		<property name="target.use.cooptrace" value="${target.enable.cooptrace}" />
		<antcall target="registry-configuration-online" />
		<mkdir dir="${project.dir.build}/registry" />
		<mkdir dir="${project.dir.build}/registry/pd" />

		<copy todir="${project.dir.build}/registry/">
			<fileset dir="${basedir}/conf/registry" includes="*.xml" />
		</copy>

    <replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@target.customer_line@@" value="${target.customer_line}" />

		<copy todir="${project.dir.build}/registry/pd">
			<fileset dir="${project.dir.build.test}" includes="pd_*.xml" />
		</copy>

		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@ejbextension@@" value="${target.ejb.extension}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@erogazione@@" value="O"/>

		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.ambiente@@" value="${registry.ambiente}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.cliente@@" value="${registry.cliente}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.istanza@@" value="${registry.istanza}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.versione.prodotto@@" value="${product.version}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.versione.servizi@@" value="${server.version}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.protocollo@@" value="${registry.protocollo}"/>
		<zip destfile="${project.dir.build.registry}/${project.name}${target.ejb.extension}-registry.zip">
			<zipfileset dir="${project.dir.build}/registry" includes="**"/>
		</zip>
	</target>

	<target name="create-registry-package-batch">
		<condition property="target.customer_line"
		           value=""
		           else="${target.customer_line}">
			<equals arg1="${target.customer_line}" arg2="${target.customer_line}"/>
		</condition>
		<property name="junit.ejb.extension" value="${batch.target.ejb.extension}"/>
		<var name="target.use.cooptrace" unset="true" />

		<property name="target.use.cooptrace" value="${batch.target.enable.cooptrace}" />

		<antcall target="registry-configuration-batch" />
		<mkdir dir="${project.dir.build}/registry" />
		<mkdir dir="${project.dir.build}/registry/pd" />

		<copy todir="${project.dir.build}/registry/">
			<fileset dir="${basedir}/conf/registry" includes="*.xml" />
		</copy>

    <replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@target.customer_line@@" value="${target.customer_line}" />
    <replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@target.customer_line@@" value="${target.customer_line}" />

		<copy todir="${project.dir.build}/registry/pd">
			<fileset dir="${project.dir.build.test}" includes="pd_*.xml" />
		</copy>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@erogazione@@" value="B"/>

		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.ambiente@@" value="${registry.ambiente}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.cliente@@" value="${registry.cliente}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.istanza@@" value="${registry.istanza}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.versione.prodotto@@" value="${product.version}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.versione.servizi@@" value="${server.version}"/>
		<replace file="${project.dir.build}/registry/deploy-descriptor.xml" token="@@registry.protocollo@@" value="${registry.protocollo}"/>
		<zip destfile="${project.dir.build.registry}/${project.name}${batch.target.ejb.extension}-registry.zip">
			<zipfileset dir="${project.dir.build}/registry" includes="**"/>
		</zip>
	</target>



	<!--********** INIZIO TARGET BATCH **********-->




	<target name="batch-package-ear" description="Crea il file EAR per il deployment"
	        depends="batch-publishing-beans-jar,
				batch-audit-jar,
				batch-audit-trail-jar,
				batch-extension-external,
				batch-multirepository-jar,
		        batch-move-aggregation-job-jar,
				batch-personalization-security-jar,
				batch-personalization-encryption-jar,
				batch-personalization-hibernate-jar,
				batch-personalization-splitting-jar,
				batch-personalization-workflow-jar,
				batch-personalization-importer-jar,
				batch-job-manager-jar,
				batch-mimetype-manager-jar,
				batch-integrity-manager-jar,
 				batch-metadati-backup-job-jar">

		<!-- Definizione di property per il doppio deploy su Bea e JBoss -->

		<condition property="batch.ear.lib"
			   value="APP-INF/lib"
	           else="lib">
			<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="batch.ear.classes.alfresco"
					   value="APP-INF/classes/alfresco"
			           else="classes/alfresco">
			<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="batch.ear.classes"
					   value="APP-INF/classes"
			           else="classes">
			<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<condition property="batch.appserv.is.weblogic" >
					<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<!-- Definizione di property per includere le librerie csi nel caso di utilizzo di PA/PD -->
		<condition property="batch.use.csi" value="true" else="false" >
					<equals arg1="${batch.target.use_csi}" arg2="true" />
		</condition>

        <!-- Helper per commentare parti di file di configurazione -->
        <!-- MB  verificare forse da usare batch.use.csi -->
		<condition property="exclude_pa_on" value="&lt;!--" else="" >
 			<equals arg1="${use.csi}" arg2="false" />
		</condition>
		<condition property="exclude_pa_off" value="--&gt;" else="" >
 			<equals arg1="${use.csi}" arg2="false" />
		</condition>

		<condition property="batch.lib.csi"
				value="${batch.project.dir.build.archives}/included/lib"
			    else="${batch.project.dir.build.archives}/included" >
 			<equals arg1="${batch.target.use_csi}" arg2="true" />
		</condition>

		<condition property="batch.lib.cooptrace"
				value="${batch.project.dir.build.archives}/included/lib"
			    else="${batch.project.dir.build.archives}/included" >
 			<equals arg1="${batch.target.use.cooptrace}" arg2="true" />
		</condition>

		<condition property="batch.use.security"
				value="true">
 			<equals arg1="${target.enable.security}" arg2="true" />
		</condition>

		<copy file="${project.dir.conf}/application/META-INF/application.xml"
		      tofile="${project.dir.build.tmp}/ear/application.xml"/>

		<condition property="batch.target.csi.include"
		           value="batch-include-conditional-csi"
		           else="batch-exclude-conditional-csi">
			<equals arg1="${batch.target.use_csi}" arg2="true"/>
		</condition>

		<echo message="Creazione archivio EAR..."/>
		<echo message="Configurazione moduli inclusi..."/>
		<antcall target="${batch.target.csi.include}" />

		<!-- Include pa bridged web service -->
		<condition property="batch.target.pabr"
		           value="batch-package-pabr"
		           else="batch-no-pabr">
			<and>
				<equals arg1="${batch.target.use_csi}" arg2="true"/>
				<equals arg1="${batch.target.include_pabr}" arg2="true"/>
			</and>
		</condition>
		<antcall target="${batch.target.pabr}" />

		<condition property="batch.pabr.included">
			<and>
				<equals arg1="${batch.target.use_csi}" arg2="true"/>
				<equals arg1="${batch.target.include_pabr}" arg2="true"/>
			</and>
		</condition>

		<!-- BEGIN: Include modulo di startup -->

		<antcall target="batch-ecmengine-${batch.target.application.server}-startup-module" />

		<!-- value="&lt;module&gt;&lt;ejb&gt;ecmengine-wls9-startup.jar&lt;/ejb&gt;&lt;/module&gt;"  -->
		<condition property="batch.startup.module.element"
			value=""
			else="&lt;module&gt;&lt;ejb&gt;ecmengine-startup.sar&lt;/ejb&gt;&lt;/module&gt;" >
			<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<replace file="${project.dir.build.tmp}/ear/application.xml"
			token="@@startup_module@@" value="${batch.startup.module.element}" />

		<replace file="${project.dir.build.tmp}/ear/application.xml" token="@@server_version@@" value="${server.version}" />

		<!-- END: Include modulo di startup -->

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/alfresco-shared.properties"
			tofile="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties"
		         token="@@avm_remote_port@@"
		         value="${batch.target.avm.remote.port}" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-core-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml" />

		<condition property="batch.partition" value="${batch.target.cluster.partition}"
				else="ecmengine">
			<isset property="batch.target.cluster.partition" />
		</condition>
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml"
			token="@@target@@" value="${batch.target.cluster.partition}" />

		<!-- Replace per splitting -->
		<condition property="batch.nodeservice.impl.bean" value="splitting"
			else="standard">
			<equals arg1="${batch.target.use_splitting}" arg2="true" />
		</condition>

		<condition property="batch.lucene.factory.splitting" value="Splitting" else="Standard">
			<equals arg1="${batch.target.use_splitting}" arg2="true" />
		</condition>

		<condition property="batch.nodeservice.interface"
			value="it.doqui.index.ecmengine.business.personalization.splitting.SplittingNodeService"
			else="org.alfresco.service.cmr.repository.NodeService" >
			<equals arg1="${batch.target.use_splitting}" arg2="true" />
		</condition>

		<!-- Replace per security -->
		<condition property="batch.permission.service.class"
			value="it.doqui.index.ecmengine.business.personalization.security.permissions.MultipleInheritancePermissionServiceImpl"
			else="org.alfresco.repo.security.permissions.impl.PermissionServiceImpl" >
			<equals arg1="${batch.target.use_acl_multiple_inheritance}" arg2="true" />
		</condition>

		<condition property="batch.permission.evaluator.afteracl.bean"
			value="afterAclStoredProc"
			else="afterAclStandard" >
			<equals arg1="${batch.target.use_acl_filter_stored_procedure}" arg2="true" />
		</condition>

		<!-- Replace per encryption -->
		<property name="batch.content.service.interface" value="it.doqui.index.ecmengine.business.personalization.encryption.CryptoContentService"/>
		<property name="batch.content.service.impl"      value="it.doqui.index.ecmengine.business.personalization.encryption.content.CryptoContentServiceImpl"/>

		<!-- Numero di parti (settato e diverso da 0) -->
		<condition property="batch.nodeservice.split.parts" value="${batch.target.splitting.parts}"
			else="20" >
			<and>
				<isset property="batch.target.splitting.parts" />
				<not>
					<equals arg1="${batch.target.splitting.parts}" arg2="0" />
				</not>
			</and>
		</condition>

		<!-- Set IndexerAndSearcherFactory -->
		<condition property="batch.lucene.indexer.mode" value="multiRepository" else="standard">
			<equals arg1="${batch.target.use_multirepository}" arg2="true" />
		</condition>

		<condition property="batch.lucene.indexer.fts.job.class"
			value="it.doqui.index.ecmengine.business.personalization.multirepository.index.lucene.fts.FTSIndexerJob"
			else="org.alfresco.repo.search.impl.lucene.fts.FTSIndexerJob" >
			<equals arg1="${batch.target.use_multirepository}" arg2="true" />
		</condition>

		<!-- Set Hibernate Bytecode Provider -->
		<condition property="batch.bytecode.provider" value="cglib" else="javassist">
			<equals arg1="${batch.target.application.server}" arg2="weblogic" trim="true" />
		</condition>

		<!-- Copia dei file per replace -->
		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-node-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-content-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-public-services-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-repository-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-search-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-security-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/ecmengine-internal-scheduled-jobs-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml" />

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/application-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/application-context.xml" />

		<copy file="${project.dir.conf.alfresco.internal}/alfresco/bootstrap-context.xml"
			tofile="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml" />

		<copy file="${project.dir.conf.alfresco.extension}/hibernate.properties"
			tofile="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" />

		<echo message="" />
		<echo message="NodeService interface: ${batch.nodeservice.interface}" />
		<echo message="NodeService implementation: ${batch.nodeservice.impl.bean}" />
		<echo message="NodeService split parts: ${batch.nodeservice.split.parts}" />
		<echo message="" />
		<echo message="Lucene Multirepo ADM factory mode: ${batch.lucene.factory.splitting}" />
		<echo message="Lucene Indexer mode: ${batch.lucene.indexer.mode}" />
		<echo message="Lucene FTS Indexer job class: ${batch.lucene.indexer.fts.job.class}" />
		<echo message="PermissionService class: ${batch.permission.service.class}" />
		<echo message="Search ACL evaluator bean: ${batch.permission.evaluator.afteracl.bean}" />
		<echo message="" />
		<echo message="Hibernate Bytecode Provider: ${batch.bytecode.provider}" />
		<echo message="SQL USE Cache              : ${query.cache}" />
		<echo message="" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceImpl@@" value="${batch.nodeservice.impl.bean}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceInterface@@" value="${batch.nodeservice.interface}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@nodeServiceBinding@@" value="${batch.nodeservice.binding.bean}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
			token="@@splitPartsCount@@" value="${batch.nodeservice.split.parts}" />

		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
			token="@@isSplitting@@" value="${batch.lucene.factory.splitting}" />

		<!-- Replace Lucene -->

		<!-- replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
			token="@@nodeServiceBinding@@" value="${nodeservice.splitting.bean}" / -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
			token="@@standardOrMultirepo@@" value="${batch.lucene.indexer.mode}" />

		<!-- Replace scheduled jobs -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml"
			token="@@ftsIndexerJobClass@@" value="${batch.lucene.indexer.fts.job.class}" />

		<!-- Replace encryption -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml"
			token="@@contentServiceClass@@" value="${batch.content.service.impl}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml"
			token="@@contentServiceInterface@@" value="${batch.content.service.interface}" />

		<!-- Replace security -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
			token="@@permissionServiceImplClass@@" value="${batch.permission.service.class}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
			token="@@afterAclEvaluator@@" value="${batch.permission.evaluator.afteracl.bean}" />

		<!-- Replace folder extenstion -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
		    token="@@extensionPath@@" value="${batch.target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
		    token="@@extensionPath@@" value="${batch.target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
		    token="@@extensionPath@@" value="${batch.target.conf.external.path}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
		    token="@@extensionProtocol@@" value="${batch.target.conf.external.protocol}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
		    token="@@extensionProtocol@@" value="${batch.target.conf.external.protocol}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
		    token="@@extensionProtocol@@" value="${batch.target.conf.external.protocol}" />

		<!-- Replace Hibernate Bytecode Provider -->
		<replace file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" token="@@bytecode.provider@@" value="${batch.bytecode.provider}" />
		<replace file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" token="@@query.cache@@"       value="${query.cache}" />


		<!-- WebLogic: extension must be inside the EAR archive -->
		<condition property="batch.extension.root.dir" value="${project.dir.build.tmp}/external/${batch.target.job.node.master}"
			else="${project.dir.build.tmp}/external/${target}" >
			<equals arg1="${batch.target.cluster.clustered}" arg2="true"/>
		</condition>

		<antcall target="batch-security-jar" />
		<antcall target="batch-massive-jar" />
		<echo message="Uso batch security: ${use.security}" />

		<property name="mtom.ejb.extension" value="${batch.target.ejb.extension}" />
		<property name="lmtom.urltoconnect" value="${batch.mtom.urltoconnect}" />
		<condition property="build.enable.mtom" value="true" else="false" >
			<equals arg1="${batch.target.enable.mtom}" arg2="true"/>
		</condition>
		<antcall target="mtom-package-war-${build.enable.mtom}" />


		<ear destfile="${project.dir.build.archives}/${project.package.name}${batch.target.ejb.extension}.ear"
		     appxml="${project.dir.build.tmp}/ear/application.xml"
		     manifest="${project.dir.conf}/application/META-INF/MANIFEST.MF">

			<!-- JBoss specific application descriptor -->
			<zipfileset file="${project.dir.conf}/application/META-INF/jboss-app.xml" prefix="META-INF" />

			<!-- WebLogic specific application descriptor -->
			<zipfileset file="${project.dir.conf}/application/META-INF/weblogic-application.xml" prefix="META-INF" />

			<fileset file="${batch.project.dir.build.archives}/foundation-beans.jar"/>
			<fileset file="${batch.project.dir.build.archives}/publishing-beans.jar"/>
			<fileset file="${batch.project.dir.build.archives}/massive.jar"/>

			<zipfileset dir="${batch.project.dir.build.archives}">
				<include name="security.jar" if="batch.use.security" />
			</zipfileset>

			<zipfileset file="${project.dir.lib}/*.jar" prefix="${batch.ear.lib}"
				excludes="commons-codec-1.2.jar,
						commons-logging-*.jar,
                        commons-httpclient-2*.jar,
						j2ee-1.3.jar,
						jcert-1.0.3.jar,
						jms-1.0.2b.jar,
						jndi-1.2.1.jar,
						jnet-1.0.3.jar,
						jsse-1.0.3.jar,
						junit-3.8.1.jar,
						log4j-*.jar,
						mail*.jar,
						jaas*.jar,
						ejb-*.jar,
						servlet-*.jar,
						csi*1.2.7.jar,
						csi-core-1.4.5.jar,
						csi-tools-1.4.5.jar,
						csi-ejb-1.4.5.jar,
						csi-rmi-1.4.5.jar,
						csi-apachesoap-1.4.5.jar,
						xsd2jibx-1.0.0.jar,
						backport-util-concurrent.jar,
						weblogic*.jar,
						api-*.jar,
						javelinx-*.jar,
						webservices-*.jar,
						wls-api-*.jar,
						wlw-langx-*.jar,
						wlw-plaf-*.jar,
						wlw-util-*.jar,
						bcelx-*.jar,
						xbean-*.jar,
						jbossall-client-*.jar,
						jboss-j2ee-*.jar,
						xercesImpl-2.8.0.jar,
						jaxp-1.1.jar,
						jaxrpc-1.1.jar,
						activation-1.0.2.jar,
						jaxen-1.1-beta-4.jar,
                        jaxen-1.1.jar,
						alfresco-*-2.9B.jar,
						alfresco-*-2.9.2B.jar,
						alfresco-*481*.jar,
						xml-apis-1.3.3.jar,
						xmlParserAPIs-2.6.2.jar,
						jdbc2_0-stdext.jar,
                        coop-trace-*.jar,${lib_mtom},${lib_mtom_dependences}" />

            <!--
               Coop trace escluso per scelta dal batch


            -->

			<zipfileset file="${batch.project.dir.build.archives}/audit.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/audit-trail.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/multirepository.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/move-aggregation-job.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-security.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-splitting.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-encryption.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-hibernate.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-workflow.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/personalization-importer.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/job-manager.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/mimetype-manager.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/integrity-manager.jar" prefix="${batch.ear.lib}"/>
			<zipfileset file="${batch.project.dir.build.archives}/metadati-backup-job.jar" prefix="${batch.ear.lib}"/>

			<!-- Modifica modo di includere librerie csi a causa del doppio deploy bea/jboss -->
			<zipfileset dir="${batch.lib.csi}" prefix="${batch.ear.lib}" >
				<include name="csi-apachesoap-1.4.5.jar" if="batch.use.csi" />
				<include name="csi-core-1.4.5.jar" if="batch.use.csi" />
				<include name="csi-ejb-1.4.5.jar" if="batch.use.csi" />
				<include name="csi-rmi-1.4.5.jar" if="batch.use.csi" />
				<include name="csi-tools-1.4.5.jar" if="batch.use.csi" />
			</zipfileset>


			<zipfileset dir="${batch.lib.cooptrace}" prefix="${batch.ear.lib}" >
				<include name="coop-trace-1.2.2.jar" if="target.use.cooptrace" />
			</zipfileset>

			<zipfileset dir="${batch.project.dir.build.archives}/included" >
				<include name="csi-beans.jar" if="batch.use.csi" />
			</zipfileset>

			<!-- APP-INF/classes/alfresco oppure classes/alfresco -->
			<zipfileset file="${project.dir.conf.alfresco.internal}/alfresco/**"
				prefix="${batch.ear.classes.alfresco}"
				excludes="application-context.xml,
						bootstrap-context.xml,
						alfresco-shared.properties" />

			<!-- Custom content model -->

			<zipfileset file="${project.dir.conf.alfresco.extension}/model/*.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine-model" />

			<zipfileset file="${project.dir.conf.alfresco.extension}/*.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine"
				excludes="ecmengine-core-services-context.xml,
								ecmengine-repository-context.xml,
								ecmengine-node-services-context.xml,
								ecmengine-content-services-context.xml,
								ecmengine-public-services-context.xml,
								ecmengine-search-context.xml,
								ecmengine-security-context.xml,
								ecmengine-internal-scheduled-jobs-context.xml" />

			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/alfresco-shared.properties"
							prefix="${batch.ear.classes.alfresco}" />

			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-core-services-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-node-services-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-content-services-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-public-services-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-search-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-security-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-internal-scheduled-jobs-context.xml"
				prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/application-context.xml"
			    prefix="${batch.ear.classes.alfresco}" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/ecmengine-repository-context.xml"
			    prefix="${batch.ear.classes.alfresco}/ecmengine" />
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/bootstrap-context.xml"
			    prefix="${batch.ear.classes.alfresco}" />

			<zipfileset dir="${project.dir.lib}" prefix="${batch.ear.lib}" >
				<include name="backport-util-concurrent.jar" if="batch.appserv.is.weblogic" />
				<include name="commons-logging-1.0.4.jar" if="batch.appserv.is.weblogic" />
			</zipfileset>

			<zipfileset dir="${batch.project.dir.build.archives}" >
				<include name="ecmengine-startup.sar" unless="batch.appserv.is.weblogic" />
			</zipfileset>

			<!-- classes -->
			<zipfileset file="${project.dir.build.tmp}/ecmengine/replace/hibernate.properties" prefix="${batch.ear.classes}" />

			<!-- Include pa bridged web service -->
			<zipfileset dir="${batch.project.dir.build.archives}">
				<include name="${project.package.name}_pabr.war" if="batch.pabr.included"/>
			</zipfileset>
		</ear>
	</target>

	<target name="batch-include-conditional-csi" depends="batch-csi-beans-jar"
	        description="Include le porte applicative CSI">
		<echo message="csi-beans.jar: incluso." />

		<mkdir dir="${batch.project.dir.build.archives.included}/lib" />
		<copy todir="${batch.project.dir.build.archives.included}/lib">
			<fileset dir="${project.dir.lib}" includes="csi-*-1.4.5.jar" excludes="csi-stadapter-1.4.5.jar"/>
		</copy>
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@csi_module@@"
		         value="&lt;module&gt;&lt;ejb&gt;csi-beans.jar&lt;/ejb&gt;&lt;/module&gt;" />

	</target>

	<target name="batch-exclude-conditional-csi"
	        description="Esclude le porte applicative CSI">
		<echo message="csi-beans.jar: escluso." />
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@csi_module@@" value="" />
	</target>

	<target name="batch-csi-beans-jar"
	        description="Compila e pacchettizza le porte applicative CSI">
		<condition property="target.customer_line"
		           value=""
		           else="${target.customer_line}">
			<equals arg1="${target.customer_line}" arg2="${target.customer_line}"/>
		</condition>
		<mkdir dir="${project.dir.build.tmp}/csi-beans"/>

		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginemanagement.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginebackoffice.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginesearch.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginesecurity.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/pa_ecmenginemassive.xml" tofile="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml"/>

		<antcall target="pa-cooptrace-${target.use.cooptrace}" />

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" token="@@target.customer_line@@" value="${target.customer_line}"/>

		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/csi-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/csi-beans/ejb-jar.xml"/>
		<copy file="${project.dir.conf}/ejb/csi-beans/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml"/>

		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@cluster_partition@@" value="${batch.target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@clustered@@" value="${batch.target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/jboss.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>

		<jar jarfile="${batch.project.dir.build.archives}/included/csi-beans.jar"
			 manifest="${project.dir.conf}/ejb/csi-beans/META-INF/MANIFEST.MF"
			 basedir="${project.dir.build.classes}"
		     includes="it/${product.dir}/${project}/interfacecsi/management/**,
			           it/${product.dir}/${project}/interfacecsi/search/**,
			           it/${product.dir}/${project}/interfacecsi/backoffice/**,
					   it/${product.dir}/${project}/interfacecsi/security/**,
					   it/${product.dir}/${project}/interfacecsi/massive/**">

			<!-- PA -->
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemanagement.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginebackoffice.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesearch.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginesecurity.xml" />
			<fileset file="${project.dir.build.tmp}/csi-beans/pa_ecmenginemassive.xml" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/weblogic-ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/csi-beans/jboss.xml" prefix="META-INF" />
		</jar>
	</target>


	<target name="batch-package-pabr" description="Crea la web application per esporre i servizi tramite bridge soap">
		<echo message="ecmengine_pabr: incluso." />

		<!-- Add web module to ear application.xml -->
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@pabr_module@@"
		         value="&lt;module&gt;&lt;web&gt;&lt;web-uri&gt;ecmengine_pabr.war&lt;/web-uri&gt;&lt;context-root&gt;ecmengine_pabr&lt;/context-root&gt;&lt;/web&gt;&lt;/module&gt;" />

		<!-- Prepare configuration files -->
		<mkdir dir="${project.dir.build.tmp}/ecmengine_pabr"/>
		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" token="@@url_to_connect@@" value="${batch.URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginemanagement_soap.xml" token="@@context_factory@@" value="${batch.CONTEXT_FACTORY}" />

		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" token="@@url_to_connect@@" value="${batch.URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginebackoffice_soap.xml" token="@@context_factory@@" value="${batch.CONTEXT_FACTORY}" />

		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@url_to_connect@@" value="${batch.URL_TO_CONNECT}" />
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@context_factory@@" value="${batch.CONTEXT_FACTORY}" />

		<copy file="${project.dir.conf.web}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" tofile="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml"/>
		<replace file="${project.dir.build.tmp}/ecmengine_pabr/pa_ecmenginesearch_soap.xml" token="@@url_to_connect@@" value="${batch.URL_TO_CONNECT}" />

		<!-- Create war -->
		<war destfile="${batch.project.dir.build.archives}/${project.package.name}_pabr.war" webxml="${project.dir.src.web}/ecmengine_pabr/WEB-INF/web.xml">
			<zipfileset dir="${project.dir.build.tmp}/ecmengine_pabr" prefix="WEB-INF/classes">
				<include name="ecmenginemanagement_soap.xml"/>
				<include name="pa_ecmenginebackoffice_soap.xml"/>
				<include name="pa_ecmenginesearch_soap.xml"/>
			</zipfileset>
			<zipfileset dir="lib" prefix="WEB-INF/lib">
				<include name="csi-*.jar"/>
				<include name="util-perf-1.0.1.jar" />
				<include name="soap-2.3.1.jar"/>
				<include name="axis-1.4.jar" />
				<include name="commons-logging-1.0.3.jar" />
				<include name="log4j-1.2.5.jar" />
				<!-- include name="jbossall-client-4.0.5.jar" / -->
				<include name="jbossall-client-${batch.jboss.version}.jar" />
			</zipfileset>
			<zipfileset dir="${batch.project.dir.build.archives}" prefix="WEB-INF/lib">
				<include name="ecmengine-backoffice-client-${batch.client.version}.jar"/>
				<include name="ecmengine-engine-client-${batch.client.version}.jar"/>
				<include name="ecmengine-common-${batch.client.version}.jar"/>
				<include name="publishing-beans.jar"/>
			</zipfileset>
		</war>
	</target>

	<target name="batch-no-pabr" description="Target fittizio invocato se non viene incluso il bridge soap della pa">
		<echo message="ecmengine_pabr: escluso." />

		<!-- Clear web module in application.xml -->
		<replace file="${project.dir.build.tmp}/ear/application.xml"
		         token="@@pabr_module@@"
		         value="" />
	</target>

	<target name="batch-ecmengine-jboss-startup-module" description="Crea il SAR per lo startup del context su JBoss">

		<jar jarfile="${batch.project.dir.build.archives}/ecmengine-startup.sar"
			manifest="${project.dir.conf}/sar/ecmengine-startup/META-INF/MANIFEST.MF"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/startup/jboss/**" >
			<zipfileset file="${project.dir.conf}/sar/ecmengine-startup/META-INF/*.xml" prefix="META-INF" />
		</jar>
	</target>

	<target name="batch-ecmengine-weblogic-startup-module" description="Crea il JAR contenente il listenere per lo startup del context su WLS9.2">
		<javac srcdir="${project.dir.src.java}"
			destdir="${project.dir.build.classes}"
			classpath="${classpath};lib/weblogic-9.2.2.0.jar"
			includes="it/${product.dir}/${project}/business/startup/weblogic/**"
			debug="on"
			fork="yes"
			executable="${batch.env.JAVA_HOME_SERVER}/bin/javac"/>

		<jar jarfile="${batch.project.dir.build.archives}/publishing-beans.jar"
			update="true"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/startup/weblogic/**" >
			<zipfileset file="${project.dir.conf}/jar/ecmengine-wls9-startup/META-INF/beanRefContext.xml" prefix="META-INF" />
		</jar>
	</target>

	<target name="batch-security-jar"
		description="Crea il JAR contenente le classi di business e integration per la gestione dei servizi massivi.">
		<condition property="security.module" value="&lt;module&gt;&lt;ejb&gt;security.jar&lt;/ejb&gt;&lt;/module&gt;" else="" >
 			<equals arg1="${target.enable.security}" arg2="true" />
		</condition>
		<replace file="${project.dir.build.tmp}/ear/application.xml" token="@@security_module@@" value="${security.module}" />

		<mkdir dir="${project.dir.build.tmp}/security"/>
		<copy file="${project.dir.conf}/ejb/security/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/security/jboss.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/security/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/security/ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/security/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${batch.target.root.log.category}"/>

		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@cluster_partition@@" value="${batch.target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@clustered@@" value="${batch.target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/security/jboss.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/security/ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>

		<copy file="${project.dir.conf}/jar/pd_dosign.xml" tofile="${project.dir.build.tmp}/security/pd_dosign.xml"/>
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_url_to_connect@@" value="${dosign_url_to_connect}" />
		<!--
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_context_factory@@" value="${dosign_context_factory}" />
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_cluster_partition@@" value="${dosign_target.cluster.partition}" />
		<replace file="${project.dir.build.tmp}/security/pd_dosign.xml" token="@@dosign_disable_discovery@@" value="${dosign_disable_discovery}" />
		-->
		<jar jarfile="${batch.project.dir.build.archives}/security.jar"
			basedir="${project.dir.build.classes}"
			manifest="${project.dir.conf}/ejb/security/META-INF/MANIFEST.MF"
			includes="it/${product.dir}/${project}/business/publishing/security/**,
			it/${product.dir}/${project}/util/**,
			it/${product.dir}/${project}/integration/security/**,
			it/${product.dir}/${project}/integration/exception/**">
			<zipfileset file="${project.dir.build.tmp}/security/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/security/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/security/weblogic-ejb-jar.xml" prefix="META-INF" />
			<fileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
			<fileset file="${project.dir.build.tmp}/security/pd_dosign.xml" />
		</jar>
	</target>

	<target name="batch-massive-jar"
		description="Crea il JAR contenente le classi di business e integration per la gestione dei servizi massivi.">
		<mkdir dir="${project.dir.build.tmp}/massive"/>

		<copy file="${project.dir.conf}/ejb/massive/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/massive/jboss.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/massive/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/massive/ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/ejb/massive/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml"/>
        <!-- Commento la parte CSI se non ho fatto il deploy CSI -->
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@exclude_pa_on@@"  value="${exclude_pa_on}"  />
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@exclude_pa_off@@" value="${exclude_pa_off}" />

		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${batch.target.root.log.category}"/>

		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@cluster_partition@@" value="${batch.target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@clustered@@" value="${batch.target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/massive/jboss.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/massive/ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>

		<jar jarfile="${batch.project.dir.build.archives}/massive.jar"
			basedir="${project.dir.build.classes}"
			manifest="${project.dir.conf}/ejb/massive/META-INF/MANIFEST.MF"
			includes="it/${product.dir}/${project}/business/publishing/massive/**,
                      it/${product.dir}/${project}/util/**,
                      it/${product.dir}/${project}/integration/massive/**,
                      it/${product.dir}/${project}/integration/exception/**">
			<zipfileset file="${project.dir.build.tmp}/massive/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/massive/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/massive/weblogic-ejb-jar.xml" prefix="META-INF" />
			<fileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<target name="batch-publishing-beans-jar" depends="batch-foundation-beans-jar">

		<mkdir dir="${project.dir.build.tmp}/publishing-beans"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/publishing-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/ejb-jar.xml" tofile="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml"/>
		<copy file="${project.dir.conf}/ejb/publishing-beans/META-INF/weblogic-ejb-jar.xml" tofile="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml"/>
		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties"/>

		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@cluster_partition@@" value="${batch.target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@clustered@@" value="${batch.target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/jboss.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}"/>
		<replace file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${batch.target.root.log.category}"/>

		<jar jarfile="${batch.project.dir.build.archives}/publishing-beans.jar"
				 manifest="${project.dir.conf}/ejb/publishing-beans/META-INF/MANIFEST.MF"
				 basedir="${project.dir.build.classes}"
				 includes="it/${product.dir}/${project}/business/publishing/management/**,
				           it/${product.dir}/${project}/business/publishing/search/**,
				           it/${product.dir}/${project}/business/publishing/backoffice/**,
				           it/${product.dir}/${project}/business/publishing/util/**,
				           it/${product.dir}/${project}/business/publishing/*.class,
		                   it/${product.dir}/${project}/dto/**,
	                       it/${product.dir}/${project}/exception/**,
				           it/${product.dir}/${project}/exception/security**,
				           it/${product.dir}/${project}/util/**">

			<zipfileset file="${project.dir.build.tmp}/publishing-beans/jboss.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/weblogic-ejb-jar.xml" prefix="META-INF" />
			<zipfileset file="${project.dir.conf}/ejb/publishing-beans/filtered-system-props.properties" />
			<zipfileset file="${project.dir.build.tmp}/publishing-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<target name="batch-foundation-beans-jar"
		description="Crea l'EJB JAR per i bean di foundation.">

		<condition property="batch.foundation.manifest.file"
				value="${project.dir.conf}/ejb/foundation-beans/META-INF/MANIFEST.MF-wl9"
				else="${project.dir.conf}/ejb/foundation-beans/META-INF/MANIFEST.MF" >
			<equals arg1="${batch.target.application.server}" arg2="weblogic" />
		</condition>

		<mkdir dir="${project.dir.build.tmp}/foundation-beans"/>
		<copy file="${project.dir.conf}/ejb/foundation-beans/META-INF/jboss.xml" tofile="${project.dir.build.tmp}/foundation-beans/jboss.xml"/>
		<copy file="${project.dir.conf}/util/ecmenginelog.properties" tofile="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties"/>

		<replace file="${project.dir.build.tmp}/foundation-beans/jboss.xml" token="@@cluster_partition@@" value="${batch.target.cluster.partition}"/>
		<replace file="${project.dir.build.tmp}/foundation-beans/jboss.xml" token="@@clustered@@" value="${batch.target.cluster.clustered}"/>
		<replace file="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties" token="@@root.log.category@@" value="${batch.target.root.log.category}"/>

		<jar jarfile="${batch.project.dir.build.archives}/foundation-beans.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/foundation/**,
			          it/${product.dir}/${project}/util/**"
			manifest="${batch.foundation.manifest.file}" >

			<zipfileset file="${project.dir.build.tmp}/foundation-beans/jboss.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/META-INF/ejb-jar.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/META-INF/weblogic-ejb-jar.xml" prefix="META-INF"/>
			<zipfileset file="${project.dir.conf}/ejb/foundation-beans/beanRefContext.xml" />
			<zipfileset file="${project.dir.build.tmp}/foundation-beans/ecmenginelog.properties" />
		</jar>
	</target>

	<target name="batch-audit-jar" description="Crea il jar contenenti le classi che si occupano di eseguire l'audit">

		<jar jarfile="${batch.project.dir.build.archives}/audit.jar"
					 manifest="${project.dir.conf}/audit/META-INF/MANIFEST.MF"
					 basedir="${project.dir.build.classes}"
				     includes="it/${product.dir}/${project}/business/audit/AuditManager.class,
							   it/${product.dir}/${project}/business/audit/AuditManagerNull.class,
							   it/${product.dir}/${project}/business/audit/AuditBusinessInterface.class,
							   it/${product.dir}/${project}/business/audit/util/AuditDtoHelper.class,
					           it/${product.dir}/${project}/integration/audit/dao/**,
				           	   it/${product.dir}/${project}/integration/audit/vo/**,
					           it/${product.dir}/${project}/dto/engine/audit/OperazioneAudit.class">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/audit/vo/AuditVO.hbm.xml"/>
		</jar>
	</target>

	<target name="batch-audit-trail-jar" description="Crea il jar contenenti le classi che si occupano di eseguire l'audit trail">

		<jar jarfile="${batch.project.dir.build.archives}/audit-trail.jar" manifest="${project.dir.conf}/audit-trail/META-INF/MANIFEST.MF"
				basedir="${project.dir.build.classes}"
			    includes="it/${product.dir}/${project}/business/audit/AuditTrailManager.class,
                          it/${product.dir}/${project}/business/audit/AuditTrailManagerNull.class,
                          it/${product.dir}/${project}/business/audit/AuditTrailBusinessInterface.class,
                          it/${product.dir}/${project}/business/audit/util/AuditDtoHelper.class,
                          it/${product.dir}/${project}/dto/engine/audit/AuditInfo.class,
                          it/${product.dir}/${project}/integration/audittrail/dao/**,
                          it/${product.dir}/${project}/integration/audittrail/vo/**,
                          it/${product.dir}/${project}/exception/publishing/engine/management/AuditTrailException.class">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/audittrail/vo/AuditTrailVO.hbm.xml"/>
		</jar>
	</target>

	<target name="batch-extension-external">
		<condition property="batch.target.extension.external"
		           value="extension-external-clustered"
		           else="extension-external-not-clustered">
			<equals arg1="${batch.target.cluster.clustered}" arg2="true"/>
		</condition>

		<antcall target="batch-${batch.target.extension.external}" />
	</target>

	<target name="batch-extension-external-clustered">
        <!-- Replace per Terracotta -->
        <condition property="batch.terracotta.rem.ftsIndexerTrigger" value="&lt;bean id=&quot;ftsIndexerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${batch.target.use_terracotta}" arg2="true" />
        </condition>
        <condition property="terracotta.rem.indexTrackerTrigger" value="&lt;bean id=&quot;admIndexTrackerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${batch.target.use_terracotta}" arg2="true" />
        </condition>
        <!-- Replace per Terracotta -->
        <!-- Replace per Audit -->
		<condition property="exclude_audit_on_value" value="&lt;!--" else="" >
 			<equals arg1="${batch.target.enable.audit}" arg2="true" />
		</condition>
		<condition property="exclude_audit_off_value" value="--&gt;" else="" >
 			<equals arg1="${batch.target.enable.audit}" arg2="true" />
		</condition>
        <!-- Replace per Audit -->

		<for list="${batch.target.cluster.nodes}" param="batch.target.cluster.node" trim="true">
			<sequential>
				<echo>Configurazione del nodo: @{batch.target.cluster.node}</echo>

				<!-- condizione che consente di includere il file di definizione dei job
			    custom solo su un singolo nodo-->
				<!--<condition property="batch.custom.jobs.excluded" >
						<equals arg1="${batch.target.job.node.master}" arg2="@{batch.target.cluster.node}" trim="true" />
				</condition>-->
				<!-- Inserito al posto del codice sopra in modo da creare le configurazioni per il deploy batch senza l'xml dello schedulatore dei job -->
				<property name="batch.target.job.node.master" value="false" />

				<echo>custom.jobs.excluded = '${batch.custom.jobs.excluded}'</echo>
				<echo>target.job.node.master = '${batch.target.job.node.master}'</echo>
				<echo>target.cluster.node = '@{batch.target.cluster.node}'</echo>
				<mkdir dir="${project.dir.build.tmp}/external/@{batch.target.cluster.node}"/>
				<copy todir="${project.dir.build.tmp}/external/@{batch.target.cluster.node}" overwrite="true">
					<fileset dir="${project.dir.conf.alfresco.extension.external}" >
						<exclude name="custom-scheduled-jobs-context.xml"           unless="batch.custom.jobs.excluded"/>
						<exclude name="custom-slavenode-scheduled-jobs-context.xml"     if="batch.custom.jobs.excluded"/>
					</fileset>

					<filterset begintoken="@@@@" endtoken="@@@@">
						<filter token="target.dir.root"     value="${batch.target.dir.root}" />
						<filter token="target.dir.index"    value="${batch.target.dir.index}" />

						<filter token="target.db.url"       value="${batch.target.db.url}" />
						<filter token="target.db.usr"       value="${batch.target.db.usr}" />
						<filter token="target.db.pwd"       value="${batch.target.db.pwd}" />
						<filter token="target.db.driver"    value="${batch.target.db.driver}" />
						<filter token="target.db.dialect"   value="${batch.target.db.dialect}" />
						<filter token="target.db.validation.query"   value="${batch.target.db.validation.query}" />

                        <filter token="target.db.pool.initial"  value="${target.db.pool.initial}" />
                        <filter token="target.db.pool.max"      value="${target.db.pool.max}"     />
                        <filter token="target.db.pool.timeout"  value="${target.db.pool.timeout}" />

						<filter token="target.db.url.primary"       value="${batch.target.db.url.primary}" />
						<filter token="target.db.usr.primary"       value="${batch.target.db.usr.primary}" />
						<filter token="target.db.pwd.primary"       value="${batch.target.db.pwd.primary}" />
						<filter token="target.db.driver.primary"    value="${batch.target.db.driver.primary}" />
						<filter token="target.db.validation.query.primary"   value="${batch.target.db.validation.query.primary}" />

						<filter token="target.db.url.secondary"       value="${batch.target.db.url.secondary}" />
						<filter token="target.db.usr.secondary"       value="${batch.target.db.usr.secondary}" />
						<filter token="target.db.pwd.secondary"       value="${batch.target.db.pwd.secondary}" />
						<filter token="target.db.driver.secondary"    value="${batch.target.db.driver.secondary}" />
						<filter token="target.db.validation.query.secondary"   value="${batch.target.db.validation.query.secondary}" />
						<filter token="target.audit.max.rolling.rows" value="${batch.target.audit.max.rolling.rows}" />
						<filter token="target.audit.trail.max.rolling.rows" value="${batch.target.audit.trail.max.rolling.rows}" />

						<filter token="target.cluster.node" value="@{batch.target.cluster.node}" />

						<filter token="ehcache.multicast_group_address.ip"
							value="${batch.target.cluster.ehcache.multicast_group_address.ip}" />
						<filter token="ehcache.multicast_group_address.port"
							value="${batch.target.cluster.ehcache.multicast_group_address.port}" />
						<filter token="ehcache.multicast_group_address.port.primary"
							value="${batch.target.cluster.ehcache.multicast_group_address.port.primary}" />
						<filter token="ehcache.multicast_group_address.port.secondary"
							value="${batch.target.cluster.ehcache.multicast_group_address.port.secondary}" />

						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.ip"
							value="${batch.target.cluster.@{batch.target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.ip}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port"
							value="${batch.target.cluster.@{batch.target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port.primary"
							value="${batch.target.cluster.@{batch.target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port.primary}" />
						<filter token="ehcache.rmi_cache_manager_peer_listener_factory.port.secondary"
							value="${batch.target.cluster.@{batch.target.cluster.node}.ehcache.rmi_cache_manager_peer_listener_factory.port.secondary}" />

						<filter token="target.conf.external.path" value="${batch.target.conf.external.path}" />
						<filter token="target.conf.external.protocol" value="${batch.target.conf.external.protocol}" />

						<filter token="fileformat.config.file" value="${batch.fileformat.config.file}" />
						<filter token="fileformat.signature.file" value="${batch.fileformat.signature.file}" />

						<filter token="DROID_SIGNATURE_FILE" value="${batch.fileformat.signature.file}" />
						<filter token="PROXY_HOST" value="${batch.fileformat.proxy.host}" />
						<filter token="PROXY_PORT" value="${batch.fileformat.proxy.port}" />

            			<filter token="rem.terracotta.ftsIndexerTrigger"   value="${batch.terracotta.rem.ftsIndexerTrigger}" />
            			<filter token="rem.terracotta.indexTrackerTrigger" value="${batch.terracotta.rem.indexTrackerTrigger}" />

                        <filter token="exclude_audit_on"  value="${exclude_audit_on_value}"  />
                        <filter token="exclude_audit_off" value="${exclude_audit_off_value}" />

                        <!-- In caso di online-batch occorre disabilitare le cache SQL -->
                        <filter token="query.cache" value="${query.cache}" />

					</filterset>
				</copy>

				<copy file="${project.dir.build.tmp}/external/@{batch.target.cluster.node}/${batch.target.repository.definition}-repository-definition.xml"
					tofile="${project.dir.build.tmp}/external/@{batch.target.cluster.node}/repository-definition.xml">
				</copy>

				<tar destfile="${project.dir.build.archives.alfresco_extension_external}/@{batch.target.cluster.node}${batch.target.ejb.extension}.tar"
					basedir="${project.dir.build.tmp}/external/@{batch.target.cluster.node}" />

				<!-- La property custom.jobs.excluded deve essere ripulita, altrimenti rimane il vecchio valore
				all'interno del ciclo -->
				<var name="batch.custom.jobs.excluded" unset="true" />

			</sequential>
		</for>
	</target>

	<target name="batch-extension-external-not-clustered">
		<mkdir dir="${project.dir.build.tmp}/external/${target}"/>

        <!-- Replace per Terracotta -->
        <condition property="batch.terracotta.rem.ftsIndexerTrigger" value="&lt;bean id=&quot;ftsIndexerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${batch.target.use_terracotta}" arg2="true" />
        </condition>
        <condition property="terracotta.rem.indexTrackerTrigger" value="&lt;bean id=&quot;admIndexTrackerTrigger&quot; class=&quot;java.lang.Object&quot; /&gt;" else="" >
            <equals arg1="${batch.target.use_terracotta}" arg2="true" />
        </condition>
        <!-- Replace per Terracotta -->
        <!-- Replace per Audit -->
		<condition property="exclude_audit_on_value" value="&lt;!--" else="" >
 			<equals arg1="${batch.target.enable.audit}" arg2="true" />
		</condition>
		<condition property="exclude_audit_off_value" value="--&gt;" else="" >
 			<equals arg1="${batch.target.enable.audit}" arg2="true" />
		</condition>
        <!-- Replace per Audit -->

		<copy todir="${project.dir.build.tmp}/external/${target}" overwrite="true">
			<fileset dir="${project.dir.conf.alfresco.extension.external}" >
				<exclude name="index-tracking-context.xml" />
				<exclude name="custom-slavenode-scheduled-jobs-context.xml" />
			</fileset>

			<filterset begintoken="@@" endtoken="@@">
				<filter token="target.dir.root"     value="${batch.target.dir.root}" />
				<filter token="target.dir.index"    value="${batch.target.dir.index}" />

				<filter token="target.db.url"       value="${batch.target.db.url}" />
				<filter token="target.db.usr"       value="${batch.target.db.usr}" />
				<filter token="target.db.pwd"       value="${batch.target.db.pwd}" />
				<filter token="target.db.driver"    value="${batch.target.db.driver}" />
				<filter token="target.db.dialect"   value="${batch.target.db.dialect}" />
				<filter token="target.db.validation.query"   value="${batch.target.db.validation.query}" />

                <filter token="target.db.pool.initial"  value="${target.db.pool.initial}" />
                <filter token="target.db.pool.max"      value="${target.db.pool.max}"     />
                <filter token="target.db.pool.timeout"  value="${target.db.pool.timeout}" />

				<filter token="target.db.url.primary"       value="${batch.target.db.url.primary}" />
				<filter token="target.db.usr.primary"       value="${batch.target.db.usr.primary}" />
				<filter token="target.db.pwd.primary"       value="${batch.target.db.pwd.primary}" />
				<filter token="target.db.driver.primary"    value="${batch.target.db.driver.primary}" />
				<filter token="target.db.validation.query.primary"   value="${batch.target.db.validation.query.primary}" />

				<filter token="target.db.url.secondary"       value="${batch.target.db.url.secondary}" />
				<filter token="target.db.usr.secondary"       value="${batch.target.db.usr.secondary}" />
				<filter token="target.db.pwd.secondary"       value="${batch.target.db.pwd.secondary}" />
				<filter token="target.db.driver.secondary"    value="${batch.target.db.driver.secondary}" />
				<filter token="target.db.validation.query.secondary"   value="${batch.target.db.validation.query.secondary}" />
				<filter token="target.audit.max.rolling.rows" value="${batch.target.audit.max.rolling.rows}" />
				<filter token="target.audit.trail.max.rolling.rows" value="${batch.target.audit.trail.max.rolling.rows}" />

				<filter token="target.cluster.node" value="${target}" />

				<filter token="target.conf.external.path" value="${batch.target.conf.external.path}" />
				<filter token="target.conf.external.protocol" value="${batch.target.conf.external.protocol}" />

				<filter token="fileformat.config.file" value="${batch.fileformat.config.file}" />
				<filter token="fileformat.signature.file" value="${batch.fileformat.signature.file}" />

				<filter token="DROID_SIGNATURE_FILE" value="${batch.fileformat.signature.file}" />
				<filter token="PROXY_HOST" value="${batch.fileformat.proxy.host}" />
				<filter token="PROXY_PORT" value="${batch.fileformat.proxy.port}" />

    			<filter token="rem.terracotta.ftsIndexerTrigger"   value="${batch.terracotta.rem.ftsIndexerTrigger}" />
       			<filter token="rem.terracotta.indexTrackerTrigger" value="${batch.terracotta.rem.indexTrackerTrigger}" />

                <filter token="exclude_audit_on"  value="${exclude_audit_on_value}"  />
                <filter token="exclude_audit_off" value="${exclude_audit_off_value}" />

                <!-- In caso di online-batch occorre disabilitare le cache SQL -->
                <filter token="query.cache" value="${query.cache}" />

			</filterset>
		</copy>

		<copy file="${project.dir.build.tmp}/external/${target}/${batch.target.repository.definition}-repository-definition.xml"
			tofile="${project.dir.build.tmp}/external/${target}/repository-definition.xml">
		</copy>

		<tar destfile="${batch.project.dir.build.archives.alfresco_extension_external}/${target}.tar"
			basedir="${project.dir.build.tmp}/external/${target}" />
	</target>

	<target name="batch-multirepository-jar" description="Crea il JAR per le classi del multirepository.">
		<mkdir dir="${project.dir.build.tmp}/multirepository"/>
		<jar jarfile="${batch.project.dir.build.archives}/multirepository.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/multirepository/**" >
		</jar>
	</target>

	<target name="batch-move-aggregation-job-jar" description="Crea il jar contenenti le classi per il job di spostamento di strutture aggregative">

		<jar jarfile="${batch.project.dir.build.archives}/move-aggregation-job.jar" manifest="${project.dir.conf}/move-aggregation-job/META-INF/MANIFEST.MF"
						basedir="${project.dir.build.classes}"
					    includes="it/${product.dir}/${project}/business/job/ServerInfoManager.class,it/${product.dir}/${project}/business/job/move/**,
			                      it/${product.dir}/${project}/exception/publishing/engine/management/MoveException.class,
			it/${product.dir}/${project}/dto/ServerInfo.class,it/${product.dir}/${project}/exception/ServerInfoException.class,
			it/${product.dir}/${project}/integration/server/dao/ServerDAO.class,
			it/${product.dir}/${project}/integration/job/dao/JobOnNodeDAO.class,
			it/${product.dir}/${project}/integration/util/EcmEngineDAOConstants.class,
            it/${product.dir}/${project}/integration/util/AbstractDAO.class">
		</jar>
	</target>

	<target name="batch-personalization-security-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di gestione delle ACL.">

		<condition property="batch.dbms.is.oracle">
			<contains string="${batch.target.db.dialect}" substring="Oracle" casesensitive="false" />
		</condition>

		<jar jarfile="${batch.project.dir.build.archives}/personalization-security.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/security/**"
			manifest="${project.dir.conf}/jar/personalization-security/META-INF/MANIFEST.MF">
			<zipfileset dir="${project.dir.src.java}/it/${product.dir}/${project}/business/personalization/security/acl/"
				fullpath="it/${product.dir}/${project}/business/personalization/security/acl/AclCheck.hbm.xml">
				<include name="AclCheck.hbm.xml" unless="batch.dbms.is.oracle" />
				<include name="AclCheckOracle.hbm.xml" if="batch.dbms.is.oracle" />
			</zipfileset>
		</jar>
	</target>

	<target name="batch-personalization-encryption-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di crittografia dei contenuti.">

		<jar jarfile="${batch.project.dir.build.archives}/personalization-encryption.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/encryption/**"
			manifest="${project.dir.conf}/jar/personalization-encryption/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="batch-personalization-hibernate-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di crittografia dei contenuti.">

		<jar jarfile="${batch.project.dir.build.archives}/personalization-hibernate.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/hibernate/**"
			manifest="${project.dir.conf}/jar/personalization-hibernate/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="batch-personalization-splitting-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di splitting dei nodi.">

		<jar jarfile="${batch.project.dir.build.archives}/personalization-splitting.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/splitting/**"
			manifest="${project.dir.conf}/jar/personalization-splitting/META-INF/MANIFEST.MF">
		</jar>
	</target>

	<target name="batch-personalization-workflow-jar"
		description="Crea il JAR contenente le personalizzazioni del sistema di workflow.">

		<jar jarfile="${batch.project.dir.build.archives}/personalization-workflow.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/workflow/**">
		</jar>
	</target>

	<target name="batch-personalization-importer-jar"
		description="Crea il JAR contenente le personalizzazioni per l'importazione di contenuti.">

		<jar jarfile="${batch.project.dir.build.archives}/personalization-importer.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/personalization/importer/**">
		</jar>
	</target>

	<target name="batch-job-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dei job.">

		<jar jarfile="${batch.project.dir.build.archives}/job-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/job/**,
			it/${product.dir}/${project}/integration/job/dao/JobDAO.class,
			it/${product.dir}/${project}/integration/job/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/job/vo/JobVO.hbm.xml"/>
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/job/vo/JobParamVO.hbm.xml"/>
		</jar>
	</target>

	<target name="batch-mimetype-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dei mimetype.">

		<jar jarfile="${batch.project.dir.build.archives}/mimetype-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/mimetype/**,
			it/${product.dir}/${project}/business/personalization/mimetype/**,
			it/${product.dir}/${project}/integration/mimetype/dao/**,
			it/${product.dir}/${project}/integration/mimetype/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/mimetype/vo/MimetypeVO.hbm.xml"/>
		</jar>
	</target>

	<target name="batch-integrity-manager-jar"
		description="Crea il JAR contenente le classi di business per la gestione dell'integrity.">

		<jar jarfile="${batch.project.dir.build.archives}/integrity-manager.jar"
			basedir="${project.dir.build.classes}"
			includes="it/${product.dir}/${project}/business/integrity/**,
			it/${product.dir}/${project}/business/personalization/integrity/**,
			it/${product.dir}/${project}/integration/integrity/dao/**,
			it/${product.dir}/${project}/integration/integrity/vo/**">
			<zipfileset dir="${project.dir.src.java}" includes="it/${product.dir}/${project}/integration/integrity/vo/Integrity*VO.hbm.xml"/>
		</jar>
	</target>

	<target name="batch-metadati-backup-job-jar" depends="batch-bind" description="Crea il jar contenenti le classi per il job di backup dei metadati">


		<jar jarfile="${batch.project.dir.build.archives}/metadati-backup-job.jar" manifest="${project.dir.conf}/metadati-backup-job/META-INF/MANIFEST.MF"
					basedir="${project.dir.build.classes}"
					includes="it/${product.dir}/${project}/business/job/backup/**,
						it/${product.dir}/${project}/business/job/ServerInfoManager.class,
						it/${product.dir}/${project}/dto/ServerInfo.class,
						it/${product.dir}/${project}/exception/ServerInfoException.class,
						it/${product.dir}/${project}/integration/server/dao/ServerDAO.class,
						it/${product.dir}/${project}/integration/job/dao/JobOnNodeDAO.class,
						it/${product.dir}/${project}/integration/util/EcmEngineDAOConstants.class,
			            it/${product.dir}/${project}/integration/util/AbstractDAO.class">
		</jar>
	</target>

	<target name="batch-bind" description="data binding" depends="batch-xsd2java">
	 <java classname="org.jibx.binding.Compile" fork="true" failonerror="true" jvm="${env.JAVA_HOME_SERVER}/bin/java">
	 	<arg value="${project.dir.build.classes}/it/${product.dir}/${project}/business/job/backup/util/binding.xml"/>
	 	<classpath>
	 		<pathelement path="${project.dir.build.classes}"/>
	 		<pathelement location="./lib/jibx-bind-2.1.jar"/>
	 		<pathelement location="./lib/jibx-run-2.1.jar"/>
	 	    <pathelement location="./lib/xpp3-1.1.3_8.jar"/>
	 	 	<pathelement location="./lib/bcel-5.1.jar"/>
	 	</classpath>
	 </java>
	</target>

	<target name="batch-xsd2java" description="Genera la classi che corrispondono all'xsd">
	 	<java classname="org.jibx.xsd2jibx.Generate" fork="true" failonerror="true" jvm="${env.JAVA_HOME_SERVER}/bin/java">
	 		<arg line="-d ./src/java -n it.doqui.index.ecmengine.business.job.backup.util"/>
	 		<arg value="./conf/metadati-backup-job/xsd/metadati.xsd"/>
	 		<classpath>
	 		   <pathelement location="./lib/xsd2jibx-1.0.0.jar"/>
	 		   <pathelement location="./lib/jibx-run-2.1.jar"/>
               <pathelement location="./lib/xpp3-1.1.3_8.jar"/>
 			   <pathelement location="./lib/jaxme-js-0.3.jar"/>
	 		</classpath>
	 	</java>

        <javac srcdir="${project.dir.src.java}"
						destdir="${project.dir.build.classes}"
						classpath="${classpath}"
						includes="it/${product.dir}/${project}/business/job/backup/util/*"
        	            optimize="on"
						compiler="modern"
						fork="yes"
						executable="${env.JAVA_HOME_SERVER}/bin/javac"/>

		<move file="${project.dir.src.java}/it/${product.dir}/${project}/business/job/backup/util/binding.xml"
			todir="${project.dir.build.classes}/it/${product.dir}/${project}/business/job/backup/util/"/>
	</target>


	<target name="registry-configuration-online">

		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.online}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${target.ejb.extension}" />

	</target>

	<target name="registry-configuration-batch">

		<copy file="${project.dir.conf}/client/pd_ecmenginemanagement.xml"  tofile="${project.dir.build.test}/pd_ecmenginemanagement.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesearch.xml"      tofile="${project.dir.build.test}/pd_ecmenginesearch.xml"     overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginebackoffice.xml"  tofile="${project.dir.build.test}/pd_ecmenginebackoffice.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginesecurity.xml"    tofile="${project.dir.build.test}/pd_ecmenginesecurity.xml"   overwrite="true"/>
		<copy file="${project.dir.conf}/client/pd_ecmenginemassive.xml"     tofile="${project.dir.build.test}/pd_ecmenginemassive.xml"    overwrite="true"/>

		<antcall target="test-cooptrace-${target.use.cooptrace}"/>

		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemanagement.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesearch.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginebackoffice.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginesecurity.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />


		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@url_to_connect@@" value="${registry.urltoconnect.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@context_factory@@" value="${context_factory}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@cluster_partition@@" value="${registry.clusterpartition.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@disable_discovery@@" value="${registry.disablediscovery.batch}" />
		<replace file="${project.dir.build.test}/pd_ecmenginemassive.xml" token="@@ejbextension@@" value="${batch.target.ejb.extension}" />

	</target>

	<target name="mtom-package-war-true" description="Rilascia il web archive per lo strato web.">
		<echo message="mtom-package-war begin"/>
		<echo message="${lib_mtom}"/>
		<property name="mtom_web" value="src/web/mtom/"/>
		<mkdir dir="${project.dir.build}/mtom"/>
		<copy file="${project.dir.conf}/web/mtom/mtom.properties" tofile="${project.dir.build}/mtom/mtom.properties" overwrite="true"/>
		<replace file="${project.dir.build}/mtom/mtom.properties" token="@@url_to_connect@@" value="${lmtom.urltoconnect}" />
		<replace file="${project.dir.build}/mtom/mtom.properties" token="@@ejbextension@@" value="${mtom.ejb.extension}" />

		<copy file="${project.dir.conf}/client/client.properties" tofile="${project.dir.build}/mtom/client.properties" overwrite="true" />
		<replace file="${project.dir.build}/mtom/client.properties" token="@@target.ejb.extension@@" value="${mtom.ejb.extension}"/>

		<mkdir dir="${project.dir.build}/mtom/META-INF"/>
		<copy file="${project.dir.conf}/web/mtom/META-INF/application.xml" tofile="${project.dir.build}/mtom/META-INF/application.xml" overwrite="true"/>
		<copy file="${project.dir.conf}/web/mtom/META-INF/MANIFEST.MF" tofile="${project.dir.build}/mtom/META-INF/MANIFEST.MF" overwrite="true"/>
		<replace file="${project.dir.build}/mtom/META-INF/application.xml" token="@@ejbextension@@" value="${mtom.ejb.extension}" />
		<condition property="mtom.linea.cliente" value="" else="-${target.context}">
			<equals arg1="${target.context}" arg2="" />
		</condition>
		<replace file="${project.dir.build}/mtom/META-INF/application.xml" token="@@lineacliente@@" value="${mtom.linea.cliente}" />

		<war destfile="${project.dir.build.archives}/ecmenginecxf${mtom.ejb.extension}.war"
             webxml="${mtom_web}/WEB-INF/web.xml" roundup= "false">

			<webinf file="${mtom_web}/WEB-INF/jboss-web.xml" />
			<webinf file="${mtom_web}/WEB-INF/weblogic.xml" />
			<webinf file="${mtom_web}/WEB-INF/cxf.xml" />

			<classes dir="${project.dir.build.classes}">
				<include name="it/doqui/index/ecmengine/mtom/**"/>
				<include name="it/doqui/index/ecmengine/business/publishing/**"/>
				<include name="it/doqui/index/ecmengine/dto/**"/>
				<include name="it/doqui/index/ecmengine/exception/**"/>
				<include name="it/doqui/index/ecmengine/util/**"/>

				<exclude name="it/doqui/index/ecmengine/business/publishing/**/*Bean*.class"/>
			</classes>

			<lib dir="lib" includes="${lib_mtom},csi*.jar,util-perf-1.0.1.jar"/>

			<fileset dir="${mtom_web}">
				<include name="**/*.jsp"/>
				<include name="**/*.html"/>
			</fileset>
			<zipfileset dir="${project.dir.build}/mtom/" prefix="WEB-INF/classes/">
				<include name="mtom.properties"/>
				<include name="client.properties"/>
			</zipfileset>
		</war>

		<ear destfile="${project.dir.build.archives}/ecmenginecxf${mtom.ejb.extension}.ear" appxml="${project.dir.build}/mtom/META-INF/application.xml" manifest="${project.dir.build}/mtom/META-INF/MANIFEST.MF">
			<zipfileset file="${project.dir.build.archives}/ecmenginecxf${mtom.ejb.extension}.war"/>
		</ear>

		<echo message="mtom-package-war end"/>
	</target>

	<target name="mtom-package-war-false" description="Non rilascia il web archive per lo strato web.">
		<echo message="mtom-package-war escluso"/>
	</target>

</project>
